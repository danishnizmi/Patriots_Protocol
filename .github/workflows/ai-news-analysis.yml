name: Patriots Protocol - Enhanced AI Intelligence Network

on:
  schedule:
    # Run every 4 hours for more frequent intelligence updates
    - cron: '0 */4 * * *'
  workflow_dispatch:
  push:
    branches: ["main"]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "patriots-protocol-ai"
  cancel-in-progress: false

jobs:
  ai-intelligence-analysis:
    runs-on: ubuntu-latest
    outputs:
      patriots_status: ${{ steps.ai_analysis.outputs.patriots_status }}
      threat_level: ${{ steps.ai_analysis.outputs.threat_level }}
      ai_confidence: ${{ steps.ai_analysis.outputs.ai_confidence }}
      reports_processed: ${{ steps.ai_analysis.outputs.reports_processed }}
    steps:
      - name: Checkout Patriots Protocol
        uses: actions/checkout@v4

      - name: Setup Python for Patriots Protocol AI
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Node.js for Legacy Systems
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Create Patriots Protocol Directory Structure
        run: |
          mkdir -p data
          mkdir -p logs
          mkdir -p backup
          echo "üéñÔ∏è  Patriots Protocol directory structure created"

      - name: Install Patriots Protocol AI Dependencies
        run: |
          echo "üì¶ Installing Patriots Protocol AI dependencies..."
          pip install --upgrade pip
          pip install aiohttp feedparser asyncio logging dataclasses typing
          echo "‚úÖ Patriots Protocol AI dependencies installed"

      - name: Patriots Protocol AI Intelligence Analysis
        id: ai_analysis
        env:
          MODEL_TOKEN: ${{ secrets.MODEL_TOKEN }}
        run: |
          echo "üéñÔ∏è  PATRIOTS PROTOCOL - AI Intelligence System Initiating..."
          echo "üìÖ Mission Start: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          
          # Run the Patriots Protocol AI analysis
          python patriots_ai_intel.py 2>&1 | tee logs/patriots_ai_analysis.log
          
          # Extract output variables for workflow
          if [ -f ./data/news-analysis.json ]; then
            echo "‚úÖ Patriots Protocol intelligence data generated successfully"
            
            # Extract metrics from the generated data for workflow outputs
            python3 -c "
          import json
          import sys
          try:
              with open('./data/news-analysis.json', 'r') as f:
                  data = json.load(f)
              metrics = data.get('metrics', {})
              system_status = data.get('system_status', {})
              
              print(f\"patriots_status={metrics.get('patriots_protocol_status', 'OPERATIONAL')}\")
              print(f\"threat_level={metrics.get('threat_level', 'LOW')}\")
              print(f\"ai_confidence={metrics.get('ai_confidence', 85)}\")
              print(f\"reports_processed={metrics.get('total_articles', 0)}\")
              
              # Set GitHub Actions outputs
              with open('$GITHUB_OUTPUT', 'a') as gh_output:
                  gh_output.write(f\"patriots_status={metrics.get('patriots_protocol_status', 'OPERATIONAL')}\\n\")
                  gh_output.write(f\"threat_level={metrics.get('threat_level', 'LOW')}\\n\")
                  gh_output.write(f\"ai_confidence={metrics.get('ai_confidence', 85)}\\n\")
                  gh_output.write(f\"reports_processed={metrics.get('total_articles', 0)}\\n\")
          except Exception as e:
              print(f\"Error processing data: {e}\", file=sys.stderr)
              with open('$GITHUB_OUTPUT', 'a') as gh_output:
                  gh_output.write(\"patriots_status=OPERATIONAL\\n\")
                  gh_output.write(\"threat_level=LOW\\n\")
                  gh_output.write(\"ai_confidence=85\\n\")
                  gh_output.write(\"reports_processed=1\\n\")
          "
          else
            echo "‚ö†Ô∏è  Patriots Protocol data file not found - using fallback"
            echo "patriots_status=OPERATIONAL" >> $GITHUB_OUTPUT
            echo "threat_level=LOW" >> $GITHUB_OUTPUT
            echo "ai_confidence=85" >> $GITHUB_OUTPUT
            echo "reports_processed=1" >> $GITHUB_OUTPUT
          fi
          
          echo "üéØ Patriots Protocol AI analysis phase complete"

      - name: Legacy JavaScript Analysis (Backup System)
        env:
          MODEL_TOKEN: ${{ secrets.MODEL_TOKEN }}
        run: |
          echo "üîÑ Running Patriots Protocol legacy analysis systems..."
          
          cat > analyze_news_legacy.js << 'EOF'
          const https = require('https');
          const fs = require('fs');

          // Patriots Protocol Legacy Analysis System
          console.log('üéñÔ∏è  Patriots Protocol Legacy Systems Online');

          async function enhanceExistingData() {
            try {
              if (fs.existsSync('./data/news-analysis.json')) {
                const data = JSON.parse(fs.readFileSync('./data/news-analysis.json', 'utf8'));
                
                // Add Patriots Protocol references and enhance existing data
                if (data.articles) {
                  data.articles.forEach(article => {
                    if (!article.patriots_protocol_ref) {
                      article.patriots_protocol_ref = "PATRIOTS PROTOCOL INTELLIGENCE NETWORK";
                    }
                    if (!article.source_link) {
                      article.source_link = "https://github.com/danishnizmi/Patriots_Protocol";
                    }
                  });
                }
                
                // Enhance metrics with Patriots Protocol branding
                if (data.metrics) {
                  data.metrics.patriots_protocol_status = data.metrics.patriots_protocol_status || "PATRIOTS PROTOCOL OPERATIONAL";
                  data.metrics.source_system = "Patriots Protocol AI Intelligence Network";
                  data.metrics.system_version = "v2.0 - Enhanced AI Integration";
                }
                
                // Add system information
                data.patriots_protocol_info = {
                  system_name: "PATRIOTS PROTOCOL",
                  description: "AI-DRIVEN INTELLIGENCE NETWORK",
                  repository: "https://github.com/danishnizmi/Patriots_Protocol",
                  ai_integration: "GitHub Models API",
                  last_enhanced: new Date().toISOString(),
                  status: "OPERATIONAL"
                };
                
                fs.writeFileSync('./data/news-analysis.json', JSON.stringify(data, null, 2));
                console.log('‚úÖ Patriots Protocol data enhanced with legacy systems');
              } else {
                console.log('‚ö†Ô∏è  No data file found - Patriots Protocol legacy system creating fallback');
                
                // Create minimal fallback data
                const fallbackData = {
                  articles: [{
                    title: "Patriots Protocol Intelligence Network Online",
                    summary: "AI-driven intelligence analysis system successfully deployed with GitHub integration.",
                    source: "PATRIOTS_PROTOCOL",
                    timestamp: new Date().toISOString(),
                    category: "SYSTEM",
                    ai_analysis: "Patriots Protocol systems operational. Intelligence gathering capabilities active.",
                    patriots_protocol_ref: "PATRIOTS PROTOCOL INTELLIGENCE NETWORK",
                    source_link: "https://github.com/danishnizmi/Patriots_Protocol"
                  }],
                  metrics: {
                    patriots_protocol_status: "PATRIOTS PROTOCOL OPERATIONAL",
                    total_articles: 1,
                    threat_level: "LOW",
                    system_status: "OPERATIONAL",
                    source_system: "Patriots Protocol Legacy Analysis"
                  },
                  patriots_protocol_info: {
                    system_name: "PATRIOTS PROTOCOL",
                    description: "AI-DRIVEN INTELLIGENCE NETWORK",
                    repository: "https://github.com/danishnizmi/Patriots_Protocol",
                    status: "OPERATIONAL"
                  }
                };
                
                fs.writeFileSync('./data/news-analysis.json', JSON.stringify(fallbackData, null, 2));
              }
            } catch (error) {
              console.error('Patriots Protocol legacy system error:', error);
            }
          }

          enhanceExistingData();
          EOF

          node analyze_news_legacy.js

      - name: Create Patriots Protocol Backup
        run: |
          echo "üíæ Creating Patriots Protocol intelligence backup..."
          if [ -f ./data/news-analysis.json ]; then
            cp ./data/news-analysis.json ./backup/patriots-backup-$(date +%Y%m%d-%H%M%S).json
            echo "‚úÖ Patriots Protocol backup created"
          fi

      - name: Validate Patriots Protocol Data
        run: |
          echo "üîç Validating Patriots Protocol intelligence data..."
          python3 -c "
          import json
          import sys
          
          try:
              with open('./data/news-analysis.json', 'r') as f:
                  data = json.load(f)
              
              # Validate required fields
              required_fields = ['articles', 'metrics', 'lastUpdated']
              missing_fields = [field for field in required_fields if field not in data]
              
              if missing_fields:
                  print(f'‚ùå Missing required fields: {missing_fields}')
                  sys.exit(1)
              
              articles = data.get('articles', [])
              metrics = data.get('metrics', {})
              
              print(f'‚úÖ Patriots Protocol validation passed')
              print(f'üìä Articles: {len(articles)}')
              print(f'üéØ Threat Level: {metrics.get(\"threat_level\", \"UNKNOWN\")}')
              print(f'ü§ñ AI Confidence: {metrics.get(\"ai_confidence\", \"UNKNOWN\")}%')
              print(f'üõ°Ô∏è  System Status: {metrics.get(\"system_status\", \"UNKNOWN\")}')
              
          except Exception as e:
              print(f'‚ùå Patriots Protocol validation failed: {e}')
              sys.exit(1)
          "

      - name: Generate Patriots Protocol Intelligence Summary
        run: |
          echo "üìã Generating Patriots Protocol Intelligence Summary..."
          python3 -c "
          import json
          from datetime import datetime
          
          try:
              with open('./data/news-analysis.json', 'r') as f:
                  data = json.load(f)
              
              metrics = data.get('metrics', {})
              articles = data.get('articles', [])
              
              print('üéñÔ∏è  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê')
              print('     PATRIOTS PROTOCOL - INTELLIGENCE BRIEFING SUMMARY')
              print('   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê')
              print(f'   üìÖ Mission Date: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S UTC\")}')
              print(f'   üìä Reports Processed: {len(articles)}')
              print(f'   üéØ Threat Level: {metrics.get(\"threat_level\", \"LOW\")}')
              print(f'   ü§ñ AI Confidence: {metrics.get(\"ai_confidence\", 85)}%')
              print(f'   üõ°Ô∏è  System Status: {metrics.get(\"system_status\", \"OPERATIONAL\")}')
              print(f'   üìà Data Quality: {metrics.get(\"data_quality\", \"GOOD\")}')
              print(f'   ‚ö° Processing Time: {metrics.get(\"processing_time\", \"< 30 seconds\")}')
              print(f'   üåê Geographic Focus: {metrics.get(\"geographic_focus\", [\"GLOBAL\"])}')
              print('   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê')
              print('     MISSION STATUS: PATRIOTS PROTOCOL OPERATIONAL')
              print('   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê')
              
          except Exception as e:
              print(f'Patriots Protocol summary generation error: {e}')
          " > logs/patriots_intelligence_summary.txt
          
          cat logs/patriots_intelligence_summary.txt

      - name: Commit Patriots Protocol Intelligence Updates
        run: |
          git config --local user.email "patriots-protocol@ai.system"
          git config --local user.name "Patriots Protocol AI"
          
          git add data/news-analysis.json
          git add logs/ 2>/dev/null || true
          git add backup/ 2>/dev/null || true
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "üìã No changes to commit - Patriots Protocol data unchanged"
          else
            # Create commit with Patriots Protocol branding
            COMMIT_MSG="üéñÔ∏è  Patriots Protocol: AI Intelligence Update"
            COMMIT_MSG="$COMMIT_MSG - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            COMMIT_MSG="$COMMIT_MSG\n\n"
            COMMIT_MSG="$COMMIT_MSGü§ñ AI Analysis: ${{ steps.ai_analysis.outputs.ai_confidence }}% confidence\n"
            COMMIT_MSG="$COMMIT_MSGüõ°Ô∏è  Threat Level: ${{ steps.ai_analysis.outputs.threat_level }}\n"
            COMMIT_MSG="$COMMIT_MSGüìä Reports: ${{ steps.ai_analysis.outputs.reports_processed }} processed\n"
            COMMIT_MSG="$COMMIT_MSG‚ö° Status: ${{ steps.ai_analysis.outputs.patriots_status }}\n\n"
            COMMIT_MSG="$COMMIT_MSGüîó Source: https://github.com/danishnizmi/Patriots_Protocol"
            
            echo -e "$COMMIT_MSG" > commit_message.txt
            git commit -F commit_message.txt
            git push
            echo "‚úÖ Patriots Protocol intelligence data committed and pushed"
          fi

  deploy-patriots-protocol:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: ai-intelligence-analysis
    steps:
      - name: Checkout Patriots Protocol
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup GitHub Pages for Patriots Protocol
        uses: actions/configure-pages@v5

      - name: Enhance Patriots Protocol Web Interface
        run: |
          echo "üåê Enhancing Patriots Protocol web interface..."
          
          # Add Patriots Protocol status information to index.html
          python3 -c "
          import re
          
          try:
              with open('index.html', 'r') as f:
                  html_content = f.read()
              
              # Add Patriots Protocol reference links and status
              patriots_status = '''
              <!-- Patriots Protocol Status Bar Enhancement -->
              <script>
                  // Add Patriots Protocol status information
                  document.addEventListener('DOMContentLoaded', function() {
                      const statusBar = document.querySelector('.status-bar');
                      if (statusBar) {
                          // Add Patriots Protocol repository link
                          const repoLink = document.createElement('span');
                          repoLink.innerHTML = '<a href=\"https://github.com/danishnizmi/Patriots_Protocol\" target=\"_blank\" style=\"color: #00ff41; text-decoration: none;\">üîó PATRIOTS PROTOCOL</a>';
                          statusBar.appendChild(repoLink);
                          
                          // Add enhanced status information
                          console.log('üéñÔ∏è  Patriots Protocol Web Interface Enhanced');
                      }
                  });
              </script>
              '''
              
              # Insert before closing body tag
              html_content = html_content.replace('</body>', patriots_status + '</body>')
              
              with open('index.html', 'w') as f:
                  f.write(html_content)
              
              print('‚úÖ Patriots Protocol web interface enhanced')
              
          except Exception as e:
              print(f'Web interface enhancement error: {e}')
          "

      - name: Validate Patriots Protocol Web Deployment
        run: |
          echo "üîç Validating Patriots Protocol web deployment..."
          
          # Check if index.html exists and contains required elements
          if [ -f "index.html" ]; then
            echo "‚úÖ index.html found"
            
            if grep -q "PATRIOTS PROTOCOL" index.html; then
              echo "‚úÖ Patriots Protocol branding verified"
            else
              echo "‚ùå Patriots Protocol branding missing"
              exit 1
            fi
            
            if [ -f "data/news-analysis.json" ]; then
              echo "‚úÖ Intelligence data file verified"
            else
              echo "‚ö†Ô∏è  Intelligence data file missing - deployment will use fallback"
            fi
          else
            echo "‚ùå index.html not found"
            exit 1
          fi
          
          echo "üéØ Patriots Protocol web validation complete"

      - name: Upload Patriots Protocol Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy Patriots Protocol to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Patriots Protocol Deployment Success
        run: |
          echo "üéñÔ∏è  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "     PATRIOTS PROTOCOL - DEPLOYMENT SUCCESSFUL"
          echo "   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "   üåê Patriots Protocol URL: ${{ steps.deployment.outputs.page_url }}"
          echo "   ‚ö° System Status: OPERATIONAL"
          echo "   ü§ñ AI Confidence: ${{ needs.ai-intelligence-analysis.outputs.ai_confidence }}%"
          echo "   üõ°Ô∏è  Threat Level: ${{ needs.ai-intelligence-analysis.outputs.threat_level }}"
          echo "   üìä Reports Processed: ${{ needs.ai-intelligence-analysis.outputs.reports_processed }}"
          echo "   üîó Repository: https://github.com/danishnizmi/Patriots_Protocol"
          echo "   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "     PATRIOTS PROTOCOL AI-DRIVEN INTELLIGENCE NETWORK ACTIVE"
          echo "   ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

  patriots-protocol-notification:
    runs-on: ubuntu-latest
    needs: [ai-intelligence-analysis, deploy-patriots-protocol]
    if: always()
    steps:
      - name: Patriots Protocol Mission Summary
        run: |
          echo "üéñÔ∏è  PATRIOTS PROTOCOL - MISSION COMPLETE"
          echo "üìÖ Mission Time: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "ü§ñ AI Analysis Status: ${{ needs.ai-intelligence-analysis.result }}"
          echo "üåê Deployment Status: ${{ needs.deploy-patriots-protocol.result }}"
          echo "üõ°Ô∏è  System: PATRIOTS PROTOCOL"
          echo "üìä Intelligence Reports: ${{ needs.ai-intelligence-analysis.outputs.reports_processed }}"
          echo "üéØ Threat Assessment: ${{ needs.ai-intelligence-analysis.outputs.threat_level }}"
          echo "‚ö° Overall Status: OPERATIONAL"
          echo "üîó Repository: https://github.com/danishnizmi/Patriots_Protocol"
          echo ""
          echo "Patriots Protocol AI-Driven Intelligence Network standing by for next mission."
