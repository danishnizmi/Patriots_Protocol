name: Patriots Protocol - Cyber Intelligence Network v4.0

on:
  schedule:
    # Run every 4 hours for fresh intelligence
    - cron: '0 */4 * * *'
    # Daily intelligence cleanup at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_cleanup:
        description: 'Force intelligence data cleanup'
        required: false
        default: 'false'
      intel_sources:
        description: 'Number of intelligence sources (default: 8)'
        required: false
        default: '8'
  push:
    branches: ["main"]
    paths-ignore:
      - 'archive/**'
      - '*.md'

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "patriots-protocol-intel-v4"
  cancel-in-progress: true

env:
  INTELLIGENCE_RETENTION_DAYS: 7
  MAX_SOURCES: ${{ github.event.inputs.intel_sources || '8' }}

jobs:
  # Intelligence data cleanup job
  intelligence-cleanup:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *' || github.event.inputs.force_cleanup == 'true'
    steps:
      - name: Checkout Patriots Protocol
        uses: actions/checkout@v4

      - name: Setup Python for Intelligence Cleanup
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Intelligence Data Cleanup
        run: |
          echo "🎖️  PATRIOTS PROTOCOL v4.0 - Intelligence Data Cleanup Starting..."
          echo "📅 Cleanup Time: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          echo "🗂️  Intelligence Retention: ${INTELLIGENCE_RETENTION_DAYS} days"
          
          # Create cleanup script
          cat > cleanup.py << 'EOF'
          import os
          import shutil
          from datetime import datetime, timedelta
          from pathlib import Path
          
          def intelligence_cleanup():
              retention_days = int(os.environ.get('INTELLIGENCE_RETENTION_DAYS', 7))
              cutoff_date = datetime.now() - timedelta(days=retention_days)
              
              total_files = 0
              total_size = 0
              
              # Directories to clean
              cleanup_dirs = ['./data', './logs', './backup']
              
              for dir_path in cleanup_dirs:
                  directory = Path(dir_path)
                  if directory.exists():
                      for file_path in directory.rglob('*'):
                          if file_path.is_file():
                              try:
                                  file_time = datetime.fromtimestamp(file_path.stat().st_mtime)
                                  if file_time < cutoff_date:
                                      file_size = file_path.stat().st_size
                                      file_path.unlink()
                                      total_files += 1
                                      total_size += file_size
                                      
                              except Exception as e:
                                  print(f"Warning: Could not clean {file_path}: {e}")
              
              print(f"✅ Intelligence cleanup complete: {total_files} files, {total_size / (1024*1024):.2f} MB")
              return total_files, total_size
          
          if __name__ == "__main__":
              intelligence_cleanup()
          EOF
          
          python cleanup.py
          
          # Update git if files were cleaned
          git config --local user.email "patriots-intel@cyber.ai"
          git config --local user.name "Patriots Protocol Intelligence"
          
          if ! git diff --quiet; then
            git add -A
            git commit -m "🎖️  Patriots Protocol v4.0: Intelligence Data Cleanup
            
            📅 Cleanup Time: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
            🗂️  Retention Policy: ${INTELLIGENCE_RETENTION_DAYS} days
            🛡️  Intelligence security maintained"
            git push
          else
            echo "📋 No intelligence files to cleanup"
          fi

  # Cyber intelligence gathering and analysis
  cyber-intelligence:
    runs-on: ubuntu-latest
    if: github.event.schedule != '0 2 * * *'
    outputs:
      threats_identified: ${{ steps.intel_analysis.outputs.threats_identified }}
      threat_level: ${{ steps.intel_analysis.outputs.threat_level }}
      intelligence_confidence: ${{ steps.intel_analysis.outputs.intelligence_confidence }}
      fresh_intel_count: ${{ steps.intel_analysis.outputs.fresh_intel_count }}
      critical_threats: ${{ steps.intel_analysis.outputs.critical_threats }}
    steps:
      - name: Checkout Patriots Protocol v4.0
        uses: actions/checkout@v4

      - name: Setup Python for Intelligence Analysis
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Create Intelligence Directory Structure
        run: |
          mkdir -p data logs backup
          chmod 750 data logs backup
          echo "🛡️  Intelligence directories secured"

      - name: Install Intelligence Dependencies
        run: |
          echo "📦 Installing cyber intelligence dependencies..."
          pip install --upgrade pip
          pip install aiohttp feedparser asyncio openai python-dateutil
          echo "✅ Intelligence dependencies ready"

      - name: Cyber Intelligence Analysis
        id: intel_analysis
        env:
          GITHUB_TOKEN: ${{ secrets.MODEL_TOKEN }}
          MODEL_TOKEN: ${{ secrets.MODEL_TOKEN }}
          MAX_SOURCES: ${{ env.MAX_SOURCES }}
        run: |
          echo "🎖️  PATRIOTS PROTOCOL v4.0 - Cyber Intelligence Mission Starting..."
          echo "📅 Mission Start: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          echo "🔍 Intelligence Sources: ${MAX_SOURCES}"
          echo "🤖 AI Model: openai/gpt-4.1-mini"
          echo "🛡️  Executing cyber intelligence analysis..."
          
          # Run intelligence analysis
          python patriots_ai_intel.py 2>&1 | tee logs/intel_analysis_$(date +%Y%m%d_%H%M%S).log
          
          # Extract intelligence metrics
          if [ -f ./data/news-analysis.json ]; then
            echo "✅ Cyber intelligence data generated"
            
            python3 -c "
          import json
          import sys
          import os
          
          try:
              with open('./data/news-analysis.json', 'r') as f:
                  data = json.load(f)
              
              metrics = data.get('metrics', {})
              
              # Extract intelligence metrics
              threats_identified = metrics.get('total_threats', 0)
              threat_level = metrics.get('global_threat_level', 'LOW')
              intelligence_confidence = metrics.get('intelligence_confidence', 85)
              fresh_intel_count = metrics.get('fresh_intel_24h', 0)
              critical_threats = metrics.get('critical_threats', 0)
              
              # Intelligence report
              print(f'🎖️  Patriots Protocol v4.0 Intelligence Report:')
              print(f'   🎯 Threats Identified: {threats_identified}')
              print(f'   🔥 Global Threat Level: {threat_level}')
              print(f'   🤖 Intelligence Confidence: {intelligence_confidence}%')
              print(f'   📊 Fresh Intelligence (24h): {fresh_intel_count}')
              print(f'   ⚠️  Critical Threats: {critical_threats}')
              print(f'   🛡️  Intelligence Sources: ${MAX_SOURCES}')
              
              # Set outputs
              with open(os.environ['GITHUB_OUTPUT'], 'a') as gh_output:
                  gh_output.write(f'threats_identified={threats_identified}\\n')
                  gh_output.write(f'threat_level={threat_level}\\n')
                  gh_output.write(f'intelligence_confidence={intelligence_confidence}\\n')
                  gh_output.write(f'fresh_intel_count={fresh_intel_count}\\n')
                  gh_output.write(f'critical_threats={critical_threats}\\n')
              
          except Exception as e:
              print(f'❌ Error processing intelligence data: {e}', file=sys.stderr)
              with open(os.environ['GITHUB_OUTPUT'], 'a') as gh_output:
                  gh_output.write('threats_identified=0\\n')
                  gh_output.write('threat_level=LOW\\n')
                  gh_output.write('intelligence_confidence=85\\n')
                  gh_output.write('fresh_intel_count=0\\n')
                  gh_output.write('critical_threats=0\\n')
          "
          else
            echo "⚠️  No intelligence data generated - using fallback"
            echo "threats_identified=0" >> $GITHUB_OUTPUT
            echo "threat_level=LOW" >> $GITHUB_OUTPUT
            echo "intelligence_confidence=85" >> $GITHUB_OUTPUT
            echo "fresh_intel_count=0" >> $GITHUB_OUTPUT
            echo "critical_threats=0" >> $GITHUB_OUTPUT
          fi

      - name: Intelligence Data Validation
        run: |
          echo "🔍 Validating cyber intelligence data..."
          
          if [ -f ./data/news-analysis.json ]; then
            python3 -c "
          import json
          import sys
          
          try:
              with open('./data/news-analysis.json', 'r') as f:
                  data = json.load(f)
              
              # Validate intelligence structure
              required_fields = ['articles', 'metrics']
              missing = [f for f in required_fields if f not in data]
              
              if missing:
                  print(f'❌ Missing intelligence fields: {missing}')
                  sys.exit(1)
              
              metrics = data.get('metrics', {})
              articles = data.get('articles', [])
              
              print(f'✅ Intelligence data validation passed')
              print(f'🎯 Threat Intelligence Reports: {len(articles)}')
              print(f'🤖 Intelligence Quality: {metrics.get(\"intelligence_confidence\", 85)}%')
              print(f'🛡️  Data integrity: Verified')
              
          except Exception as e:
              print(f'❌ Intelligence validation failed: {e}')
              sys.exit(1)
          "
          fi

      - name: Intelligence Backup Creation
        run: |
          echo "💾 Creating intelligence backup..."
          
          if [ -f ./data/news-analysis.json ]; then
            # Create timestamped backup
            mkdir -p backup
            cp ./data/news-analysis.json ./backup/patriots-intel-$(date +%Y%m%d-%H%M%S).json
            
            # Keep only last 5 backups
            ls -t ./backup/*.json 2>/dev/null | tail -n +6 | xargs rm -f 2>/dev/null || true
            
            echo "✅ Intelligence backup created"
          fi

      - name: Intelligence Commit
        run: |
          git config --local user.email "patriots-intel@cyber.ai"
          git config --local user.name "Patriots Protocol Intelligence v4.0"
          
          # Add files
          git add data/news-analysis.json 2>/dev/null || true
          git add logs/ 2>/dev/null || true
          git add backup/ 2>/dev/null || true
          
          if git diff --staged --quiet; then
            echo "📋 No new intelligence data"
          else
            # Intelligence-focused commit
            COMMIT_MSG="🎖️  Patriots Protocol v4.0: Cyber Intelligence Update"
            COMMIT_MSG="$COMMIT_MSG\n\n📅 Mission: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            COMMIT_MSG="$COMMIT_MSG\n🎯 Threats: ${{ steps.intel_analysis.outputs.threats_identified }}"
            COMMIT_MSG="$COMMIT_MSG\n🔥 Level: ${{ steps.intel_analysis.outputs.threat_level }}"
            COMMIT_MSG="$COMMIT_MSG\n🤖 Confidence: ${{ steps.intel_analysis.outputs.intelligence_confidence }}%"
            COMMIT_MSG="$COMMIT_MSG\n📊 Fresh Intel: ${{ steps.intel_analysis.outputs.fresh_intel_count }}"
            COMMIT_MSG="$COMMIT_MSG\n⚠️  Critical: ${{ steps.intel_analysis.outputs.critical_threats }}"
            COMMIT_MSG="$COMMIT_MSG\n\n🔗 https://github.com/danishnizmi/Patriots_Protocol"
            
            echo -e "$COMMIT_MSG" > commit_message.txt
            git commit -F commit_message.txt
            git push
            echo "✅ Intelligence data committed"
          fi

  # Deploy intelligence dashboard
  deploy-intelligence:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: cyber-intelligence
    if: needs.cyber-intelligence.result == 'success'
    steps:
      - name: Checkout Patriots Protocol
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Intelligence Dashboard Validation
        run: |
          echo "🌐 Validating intelligence dashboard..."
          
          # Validate core files
          if [ -f "index.html" ] && [ -f "data/news-analysis.json" ]; then
            echo "✅ Core intelligence files validated"
            
            # Check data structure
            python3 -c "
          import json
          
          try:
              with open('data/news-analysis.json', 'r') as f:
                  data = json.load(f)
              
              articles = data.get('articles', [])
              metrics = data.get('metrics', {})
              
              print(f'📊 Intelligence Reports: {len(articles)}')
              print(f'🎯 Threat Level: {metrics.get(\"global_threat_level\", \"LOW\")}')
              print(f'🤖 Confidence: {metrics.get(\"intelligence_confidence\", 85)}%')
              
              if len(articles) > 0:
                  print('✅ Intelligence data structure valid')
              else:
                  print('⚠️  No threat intelligence available')
                  
          except Exception as e:
              print(f'❌ Intelligence validation error: {e}')
              exit(1)
          "
            
          else
            echo "❌ Missing core intelligence files"
            exit 1
          fi

      - name: Upload Intelligence Dashboard
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy Intelligence Dashboard
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Intelligence Deployment Success
        run: |
          echo "🎖️  ═══════════════════════════════════════════════════════════════════"
          echo "     PATRIOTS PROTOCOL v4.0 - CYBER INTELLIGENCE DEPLOYMENT SUCCESS"
          echo "  ═══════════════════════════════════════════════════════════════════"
          echo "  🌐 Intelligence Dashboard: ${{ steps.deployment.outputs.page_url }}"
          echo "  🎯 Threats Identified: ${{ needs.cyber-intelligence.outputs.threats_identified }}"
          echo "  🔥 Threat Level: ${{ needs.cyber-intelligence.outputs.threat_level }}"
          echo "  🤖 Intelligence Confidence: ${{ needs.cyber-intelligence.outputs.intelligence_confidence }}%"
          echo "  📊 Fresh Intelligence: ${{ needs.cyber-intelligence.outputs.fresh_intel_count }}"
          echo "  ⚠️  Critical Threats: ${{ needs.cyber-intelligence.outputs.critical_threats }}"
          echo "  🛡️  Security: Active intelligence monitoring"
          echo "  ═══════════════════════════════════════════════════════════════════"

  # Intelligence monitoring and alerts
  intelligence-monitoring:
    runs-on: ubuntu-latest
    needs: [cyber-intelligence]
    if: always()
    steps:
      - name: Intelligence Summary Report
        run: |
          echo "🎖️  ═══════════════════════════════════════════════════════════════════"
          echo "       PATRIOTS PROTOCOL v4.0 - INTELLIGENCE MONITORING REPORT"
          echo "  ═══════════════════════════════════════════════════════════════════"
          echo "  📅 Analysis Time: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "  🎯 Threats Identified: ${{ needs.cyber-intelligence.outputs.threats_identified || '0' }}"
          echo "  🔥 Global Threat Level: ${{ needs.cyber-intelligence.outputs.threat_level || 'LOW' }}"
          echo "  🤖 Intelligence Confidence: ${{ needs.cyber-intelligence.outputs.intelligence_confidence || '85' }}%"
          echo "  📊 Fresh Intelligence (24h): ${{ needs.cyber-intelligence.outputs.fresh_intel_count || '0' }}"
          echo "  ⚠️  Critical Threats: ${{ needs.cyber-intelligence.outputs.critical_threats || '0' }}"
          echo "  🛡️  Intelligence Status: OPERATIONAL"
          echo "  🗂️  Data Retention: ${INTELLIGENCE_RETENTION_DAYS} days"
          echo "  ═══════════════════════════════════════════════════════════════════"
          
          # Check for critical threats
          CRITICAL_COUNT="${{ needs.cyber-intelligence.outputs.critical_threats || '0' }}"
          if [ "$CRITICAL_COUNT" -gt "0" ]; then
            echo "🚨 CRITICAL THREAT ALERT: $CRITICAL_COUNT critical threats identified!"
            echo "   Immediate threat assessment and response recommended."
          else
            echo "✅ No critical threats detected in current intelligence cycle"
          fi
          
          echo "Patriots Protocol v4.0 Cyber Intelligence Mission Complete."
