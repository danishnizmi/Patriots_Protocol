name: Patriots Protocol - Enhanced AI Cyber Intelligence v4.1

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours for cost optimization
  workflow_dispatch:
    inputs:
      ai_analysis_intensity:
        description: 'AI Analysis Intensity'
        required: false
        default: 'smart'
        type: choice
        options:
        - 'minimal'
        - 'smart' 
        - 'enhanced'
        - 'maximum'
      force_ai_analysis:
        description: 'Force AI analysis for all threats'
        required: false
        default: 'false'
        type: boolean
      geographic_focus:
        description: 'Geographic focus for intelligence collection'
        required: false
        default: 'global'
        type: choice
        options:
        - 'global'
        - 'us_focus'
        - 'apac_focus'
        - 'eu_focus'
  push:
    branches: ["main"]
    paths:
      - 'patriots_ai_intel.py'
      - 'index.html'
      - '.github/workflows/ai-news-analysis.yml'

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "patriots-enhanced-intel"
  cancel-in-progress: true

env:
  INTELLIGENCE_RETENTION_DAYS: 10
  PYTHON_VERSION: '3.11'
  AI_ANALYSIS_MODE: ${{ github.event.inputs.ai_analysis_intensity || 'smart' }}
  GEOGRAPHIC_FOCUS: ${{ github.event.inputs.geographic_focus || 'global' }}
  MAX_AI_CALLS: 15

jobs:
  enhanced-threat-intelligence:
    runs-on: ubuntu-latest
    outputs:
      mission_status: ${{ steps.enhanced_analysis.outputs.mission_status }}
      threats_analyzed: ${{ steps.enhanced_analysis.outputs.threats_analyzed }}
      critical_threats: ${{ steps.enhanced_analysis.outputs.critical_threats }}
      zero_day_exploits: ${{ steps.enhanced_analysis.outputs.zero_day_exploits }}
      global_threat_level: ${{ steps.enhanced_analysis.outputs.global_threat_level }}
      intelligence_confidence: ${{ steps.enhanced_analysis.outputs.intelligence_confidence }}
      ai_quality_score: ${{ steps.enhanced_analysis.outputs.ai_quality_score }}
      cost_efficiency: ${{ steps.enhanced_analysis.outputs.cost_efficiency }}

    steps:
      - name: Checkout Patriots Protocol Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 2

      - name: Setup Enhanced Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Optimized Dependencies
        run: |
          echo "🎖️ Installing Patriots Protocol Enhanced Dependencies..."
          
          pip install --upgrade pip setuptools wheel
          
          # Core intelligence processing
          pip install aiohttp feedparser python-dateutil
          
          # Enhanced data processing (optional for cost optimization)
          pip install pandas numpy || echo "⚠️ Advanced data processing libraries unavailable"
          
          # AI analysis capabilities with fallback
          pip install openai || echo "⚠️ OpenAI unavailable - will use enhanced basic analysis"
          
          # Performance enhancements
          pip install aiofiles || echo "⚠️ Performance enhancements unavailable"
          
          echo "✅ Enhanced dependencies configured for ${AI_ANALYSIS_MODE} analysis"

      - name: Validate Enhanced Intelligence Engine
        run: |
          echo "🔍 Validating Enhanced Intelligence Engine..."
          
          if [ -f "patriots_ai_intel.py" ]; then
            echo "✅ Enhanced intelligence engine found"
            
            # Syntax validation
            python -m py_compile patriots_ai_intel.py
            echo "✅ Syntax validation passed"
            
            # Check for enhanced features
            enhanced_features=0
            
            if grep -q "SmartPatriotsIntelligence" patriots_ai_intel.py; then
              echo "✅ Smart intelligence class detected"
              enhanced_features=$((enhanced_features + 1))
            fi
            
            if grep -q "cost_optimization" patriots_ai_intel.py; then
              echo "✅ Cost optimization detected"
              enhanced_features=$((enhanced_features + 1))
            fi
            
            if grep -q "smart_ai_analysis" patriots_ai_intel.py; then
              echo "✅ Smart AI analysis detected"
              enhanced_features=$((enhanced_features + 1))
            fi
            
            if grep -q "EnhancedThreatReport" patriots_ai_intel.py; then
              echo "✅ Enhanced threat reporting detected"
              enhanced_features=$((enhanced_features + 1))
            fi
            
            echo "📊 Enhanced features detected: ${enhanced_features}/4"
            
            if [ "$enhanced_features" -ge "3" ]; then
              echo "✅ Enhanced intelligence engine validated"
            else
              echo "⚠️ Some enhanced features missing"
            fi
            
          else
            echo "❌ Enhanced intelligence engine not found"
            exit 1
          fi

      - name: Create Enhanced Intelligence Infrastructure
        run: |
          echo "🛡️ Creating enhanced intelligence infrastructure..."
          
          # Enhanced directory structure
          mkdir -p data/{raw,processed,analytics,exports,cache}
          mkdir -p logs/{intelligence,performance,errors}
          mkdir -p backup/{daily,emergency}
          
          # Set permissions
          chmod 750 data logs backup
          chmod 750 data/{raw,processed,analytics,exports,cache}
          chmod 750 logs/{intelligence,performance,errors}
          
          # Create configuration
          cat > data/config.json << EOF
          {
            "ai_analysis_mode": "${AI_ANALYSIS_MODE}",
            "geographic_focus": "${GEOGRAPHIC_FOCUS}",
            "max_ai_calls": ${MAX_AI_CALLS},
            "mission_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
            "cost_optimization": true,
            "enhanced_features": {
              "smart_ai_usage": true,
              "cost_optimization": true,
              "enhanced_reporting": true,
              "smart_caching": true
            }
          }
          EOF
          
          echo "Advanced intelligence infrastructure initialized" > logs/intelligence/system_init.log
          echo "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ): Infrastructure ready" > logs/performance/startup.log
          
          echo "✅ Enhanced infrastructure ready for ${AI_ANALYSIS_MODE} analysis"

      - name: Execute Enhanced Intelligence Mission
        id: enhanced_analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MODEL_TOKEN: ${{ secrets.MODEL_TOKEN }}
          AI_ANALYSIS_MODE: ${{ env.AI_ANALYSIS_MODE }}
          GEOGRAPHIC_FOCUS: ${{ env.GEOGRAPHIC_FOCUS }}
          FORCE_AI_ANALYSIS: ${{ github.event.inputs.force_ai_analysis }}
        run: |
          echo "🎖️ PATRIOTS PROTOCOL v4.1 - Enhanced Intelligence Mission Starting..."
          echo "📅 Mission Start: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          echo "🤖 AI Analysis Mode: ${AI_ANALYSIS_MODE}"
          echo "🌍 Geographic Focus: ${GEOGRAPHIC_FOCUS}"
          echo "💰 Cost Optimization: ENABLED"
          echo "🛡️ Executing enhanced cyber threat intelligence operation..."
          
          # Performance monitoring
          MISSION_START=$(date +%s)
          
          # Execute enhanced intelligence mission
          python patriots_ai_intel.py 2>&1 | tee logs/intelligence/enhanced_mission_$(date +%Y%m%d_%H%M%S).log
          
          # Calculate performance metrics
          MISSION_END=$(date +%s)
          EXECUTION_TIME=$((MISSION_END - MISSION_START))
          echo "⏱️ Mission execution: ${EXECUTION_TIME} seconds" | tee -a logs/performance/mission_timing.log
          
          # Enhanced metrics extraction
          if [ -f ./data/news-analysis.json ]; then
            echo "✅ Enhanced intelligence data generated successfully"
            
            python3 -c "
          import json
          import sys
          import os
          from datetime import datetime
          
          try:
              with open('./data/news-analysis.json', 'r') as f:
                  data = json.load(f)
              
              articles = data.get('articles', [])
              metrics = data.get('metrics', {})
              summary = data.get('intelligence_summary', {})
              ai_usage = data.get('ai_usage', {})
              
              # Core metrics
              threats_analyzed = len(articles)
              critical_threats = metrics.get('critical_threats', 0)
              zero_day_exploits = metrics.get('zero_day_count', 0)
              global_threat_level = metrics.get('global_threat_level', 'MONITORING')
              intelligence_confidence = metrics.get('intelligence_confidence', 0)
              mission_status = summary.get('mission_status', 'UNKNOWN')
              
              # Enhanced metrics
              ai_quality_score = metrics.get('ai_analysis_quality', 0)
              ai_calls_made = ai_usage.get('api_calls_made', 0)
              ai_calls_limit = ai_usage.get('api_calls_limit', 15)
              cost_efficiency = ai_usage.get('efficiency_score', 0)
              
              # Mission summary
              print(f'🎖️ Patriots Protocol v4.1 Enhanced Intelligence Summary:')
              print(f'   📊 Mission Status: {mission_status}')
              print(f'   🎯 Threats Analyzed: {threats_analyzed}')
              print(f'   🚨 Critical Threats: {critical_threats}')
              print(f'   💥 Zero-Day Exploits: {zero_day_exploits}')
              print(f'   🔥 Global Threat Level: {global_threat_level}')
              print(f'   🎯 Intelligence Confidence: {intelligence_confidence}%')
              print(f'   🤖 AI Quality Score: {ai_quality_score}%')
              print(f'   💰 AI Usage: {ai_calls_made}/{ai_calls_limit} calls')
              print(f'   📈 Cost Efficiency: {cost_efficiency}%')
              print(f'   ⏱️ Execution Time: ${EXECUTION_TIME} seconds')
              
              # Performance assessment
              if ai_quality_score >= 80 and cost_efficiency >= 70:
                  print('   ✅ Performance: OPTIMAL')
              elif ai_quality_score >= 60 and cost_efficiency >= 50:
                  print('   ✅ Performance: GOOD')
              else:
                  print('   ⚠️ Performance: NEEDS OPTIMIZATION')
              
              # Set GitHub Actions outputs
              outputs = {
                  'mission_status': mission_status,
                  'threats_analyzed': threats_analyzed,
                  'critical_threats': critical_threats,
                  'zero_day_exploits': zero_day_exploits,
                  'global_threat_level': global_threat_level,
                  'intelligence_confidence': intelligence_confidence,
                  'ai_quality_score': ai_quality_score,
                  'cost_efficiency': cost_efficiency
              }
              
              with open(os.environ['GITHUB_OUTPUT'], 'a') as gh_output:
                  for key, value in outputs.items():
                      gh_output.write(f'{key}={value}\\n')
              
          except Exception as e:
              print(f'❌ Enhanced metrics extraction failed: {e}', file=sys.stderr)
              # Set error fallback values
              error_outputs = {
                  'mission_status': 'ERROR',
                  'threats_analyzed': 0,
                  'critical_threats': 0,
                  'zero_day_exploits': 0,
                  'global_threat_level': 'ERROR',
                  'intelligence_confidence': 0,
                  'ai_quality_score': 0,
                  'cost_efficiency': 0
              }
              
              with open(os.environ['GITHUB_OUTPUT'], 'a') as gh_output:
                  for key, value in error_outputs.items():
                      gh_output.write(f'{key}={value}\\n')
          "
          else
            echo "⚠️ No enhanced intelligence data generated"
            cat >> $GITHUB_OUTPUT << EOF
          mission_status=NO_DATA
          threats_analyzed=0
          critical_threats=0
          zero_day_exploits=0
          global_threat_level=NO_DATA
          intelligence_confidence=0
          ai_quality_score=0
          cost_efficiency=0
          EOF
          fi

      - name: Enhanced Data Validation and Backup
        run: |
          echo "🔍 Enhanced data validation and backup..."
          
          if [ -f ./data/news-analysis.json ]; then
            # Validate JSON structure
            python3 -c "
          import json
          import sys
          
          try:
              with open('./data/news-analysis.json', 'r') as f:
                  data = json.load(f)
              
              required_fields = ['articles', 'metrics', 'intelligence_summary', 'ai_usage']
              missing = [field for field in required_fields if field not in data]
              
              if missing:
                  print(f'❌ Missing required fields: {missing}')
                  sys.exit(1)
              
              articles = data.get('articles', [])
              print(f'✅ Enhanced validation passed: {len(articles)} articles')
              
          except Exception as e:
              print(f'❌ Enhanced validation failed: {e}')
              sys.exit(1)
          "
          
            # Create backup
            timestamp=$(date +%Y%m%d-%H%M%S)
            mkdir -p backup/enhanced/${timestamp}
            cp ./data/news-analysis.json ./backup/enhanced/${timestamp}/intelligence-${timestamp}.json
            
            echo "✅ Enhanced validation and backup completed"
          else
            echo "❌ Enhanced intelligence data file missing"
            exit 1
          fi

      - name: Commit Enhanced Intelligence Data
        run: |
          # Configure git
          git config --local user.email "patriots-enhanced@cyber.ai"
          git config --local user.name "Patriots Protocol Enhanced Intelligence v4.1"
          
          # Stage files
          git add data/news-analysis.json 2>/dev/null || true
          git add logs/intelligence/ 2>/dev/null || true
          
          # Check for changes
          if git diff --staged --quiet; then
            echo "📋 No new enhanced intelligence data to commit"
          else
            # Create commit message
            COMMIT_MSG="🎖️ Patriots Protocol v4.1: Enhanced AI Cyber Intelligence"
            COMMIT_MSG="${COMMIT_MSG}\n\n📅 Mission: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            COMMIT_MSG="${COMMIT_MSG}\n🎯 Analyzed: ${{ steps.enhanced_analysis.outputs.threats_analyzed }} threats"
            COMMIT_MSG="${COMMIT_MSG}\n🚨 Critical: ${{ steps.enhanced_analysis.outputs.critical_threats }}"
            COMMIT_MSG="${COMMIT_MSG}\n💥 Zero-Days: ${{ steps.enhanced_analysis.outputs.zero_day_exploits }}"
            COMMIT_MSG="${COMMIT_MSG}\n🔥 Level: ${{ steps.enhanced_analysis.outputs.global_threat_level }}"
            COMMIT_MSG="${COMMIT_MSG}\n🎯 Confidence: ${{ steps.enhanced_analysis.outputs.intelligence_confidence }}%"
            COMMIT_MSG="${COMMIT_MSG}\n🤖 AI Quality: ${{ steps.enhanced_analysis.outputs.ai_quality_score }}%"
            COMMIT_MSG="${COMMIT_MSG}\n💰 Efficiency: ${{ steps.enhanced_analysis.outputs.cost_efficiency }}%"
            COMMIT_MSG="${COMMIT_MSG}\n📊 Status: ${{ steps.enhanced_analysis.outputs.mission_status }}"
            COMMIT_MSG="${COMMIT_MSG}\n\n🔗 Enhanced Intelligence: https://github.com/danishnizmi/Patriots_Protocol"
            
            echo -e "$COMMIT_MSG" > enhanced_commit_message.txt
            git commit -F enhanced_commit_message.txt
            git push
            
            echo "✅ Enhanced intelligence data committed and deployed"
          fi

  deploy-enhanced-dashboard:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: enhanced-threat-intelligence
    if: always()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Enhanced Dashboard Validation
        run: |
          echo "🌐 Validating Enhanced Patriots Protocol Dashboard..."
          
          if [ -f "index.html" ]; then
            echo "✅ Enhanced dashboard found"
            
            # Check for enhanced features
            enhanced_features=0
            
            if grep -q "EnhancedThreatDashboard" index.html; then
              echo "✅ Enhanced dashboard component detected"
              enhanced_features=$((enhanced_features + 1))
            fi
            
            if grep -q "matrix.*background" index.html; then
              echo "✅ Matrix background detected"
              enhanced_features=$((enhanced_features + 1))
            fi
            
            if grep -q "smart.*summary" index.html; then
              echo "✅ Smart summary features detected"
              enhanced_features=$((enhanced_features + 1))
            fi
            
            echo "📊 Enhanced dashboard features: ${enhanced_features}/3"
            
            if [ "$enhanced_features" -ge "2" ]; then
              echo "✅ Enhanced dashboard validated"
            else
              echo "⚠️ Some enhanced features missing"
            fi
          else
            echo "❌ Enhanced dashboard missing"
            exit 1
          fi

      - name: Upload Enhanced Dashboard
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy Enhanced Dashboard
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Enhanced Deployment Success
        run: |
          echo "🎖️ ═══════════════════════════════════════════════════════════════════"
          echo "     PATRIOTS PROTOCOL v4.1 - ENHANCED INTELLIGENCE DEPLOYED"
          echo "  ═══════════════════════════════════════════════════════════════════"
          echo "  🌐 Dashboard: ${{ steps.deployment.outputs.page_url }}"
          echo "  📊 Mission: ${{ needs.enhanced-threat-intelligence.outputs.mission_status }}"
          echo "  🎯 Threats: ${{ needs.enhanced-threat-intelligence.outputs.threats_analyzed }}"
          echo "  🚨 Critical: ${{ needs.enhanced-threat-intelligence.outputs.critical_threats }}"
          echo "  💥 Zero-Days: ${{ needs.enhanced-threat-intelligence.outputs.zero_day_exploits }}"
          echo "  🔥 Level: ${{ needs.enhanced-threat-intelligence.outputs.global_threat_level }}"
          echo "  🤖 AI Quality: ${{ needs.enhanced-threat-intelligence.outputs.ai_quality_score }}%"
          echo "  💰 Efficiency: ${{ needs.enhanced-threat-intelligence.outputs.cost_efficiency }}%"
          echo "  ⏰ Next Update: 6 hours"
          echo "  ═══════════════════════════════════════════════════════════════════"

  enhanced-mission-summary:
    runs-on: ubuntu-latest
    needs: [enhanced-threat-intelligence, deploy-enhanced-dashboard]
    if: always()
    steps:
      - name: Patriots Protocol Enhanced Mission Summary
        run: |
          echo "🎖️ ═══════════════════════════════════════════════════════════════════"
          echo "     PATRIOTS PROTOCOL v4.1 - ENHANCED INTELLIGENCE MISSION COMPLETE"
          echo "  ═══════════════════════════════════════════════════════════════════"
          echo "  📅 Mission: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "  📊 Status: ${{ needs.enhanced-threat-intelligence.outputs.mission_status || 'UNKNOWN' }}"
          echo "  🎯 Threats Analyzed: ${{ needs.enhanced-threat-intelligence.outputs.threats_analyzed || '0' }}"
          echo "  🚨 Critical Threats: ${{ needs.enhanced-threat-intelligence.outputs.critical_threats || '0' }}"
          echo "  💥 Zero-Day Exploits: ${{ needs.enhanced-threat-intelligence.outputs.zero_day_exploits || '0' }}"
          echo "  🔥 Global Threat Level: ${{ needs.enhanced-threat-intelligence.outputs.global_threat_level || 'UNKNOWN' }}"
          echo "  🎯 Intelligence Confidence: ${{ needs.enhanced-threat-intelligence.outputs.intelligence_confidence || '0' }}%"
          echo "  🤖 AI Analysis Quality: ${{ needs.enhanced-threat-intelligence.outputs.ai_quality_score || '0' }}%"
          echo "  💰 Cost Efficiency: ${{ needs.enhanced-threat-intelligence.outputs.cost_efficiency || '0' }}%"
          echo "  🛡️ Enhanced Intelligence: OPERATIONAL"
          echo "  ⏰ Update Frequency: Every 6 hours"
          echo "  ═══════════════════════════════════════════════════════════════════"
          
          # Enhanced assessment
          CRITICAL_COUNT="${{ needs.enhanced-threat-intelligence.outputs.critical_threats || '0' }}"
          AI_QUALITY="${{ needs.enhanced-threat-intelligence.outputs.ai_quality_score || '0' }}"
          COST_EFFICIENCY="${{ needs.enhanced-threat-intelligence.outputs.cost_efficiency || '0' }}"
          
          echo "🚨 ENHANCED THREAT ASSESSMENT:"
          
          if [ "$CRITICAL_COUNT" -gt "2" ]; then
            echo "   🚨 HIGH ALERT: $CRITICAL_COUNT critical threats detected"
            echo "   📋 Immediate Actions Required"
          elif [ "$CRITICAL_COUNT" -gt "0" ]; then
            echo "   ⚠️ ELEVATED ALERT: $CRITICAL_COUNT critical threats detected"
            echo "   📋 Enhanced monitoring recommended"
          else
            echo "   ✅ Threat level stable"
          fi
          
          echo ""
          echo "🤖 AI PERFORMANCE & COST OPTIMIZATION:"
          if [ "$AI_QUALITY" -ge "80" ] && [ "$COST_EFFICIENCY" -ge "70" ]; then
            echo "   ✅ AI Performance: OPTIMAL"
            echo "   💰 Cost Efficiency: EXCELLENT"
          elif [ "$AI_QUALITY" -ge "60" ] && [ "$COST_EFFICIENCY" -ge "50" ]; then
            echo "   ✅ AI Performance: GOOD"
            echo "   💰 Cost Efficiency: GOOD"
          else
            echo "   ⚠️ Performance: OPTIMIZATION NEEDED"
          fi
          
          echo ""
          echo "🎖️ Patriots Protocol v4.1 Enhanced Intelligence Mission Complete"
          echo "   🔗 Enhanced Dashboard: Live intelligence with cost optimization"
          echo "   🛡️ Repository: https://github.com/danishnizmi/Patriots_Protocol"
          echo "   📈 Next Mission: Scheduled in 6 hours"
