name: Patriots Protocol - Cyber Intelligence Network v4.0

on:
  schedule:
    - cron: '0 */4 * * *'  # Every 4 hours for fresh intelligence
  workflow_dispatch:
    inputs:
      force_analysis:
        description: 'Force immediate intelligence analysis'
        required: false
        default: 'false'
        type: boolean
  push:
    branches: ["main"]
    paths-ignore:
      - 'archive/**'
      - '*.md'
      - 'docs/**'

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "patriots-protocol-intelligence"
  cancel-in-progress: true

env:
  INTELLIGENCE_RETENTION_DAYS: 7
  PYTHON_VERSION: '3.11'

jobs:
  cyber-intelligence-analysis:
    runs-on: ubuntu-latest
    outputs:
      threats_detected: ${{ steps.intelligence.outputs.threats_detected }}
      threat_level: ${{ steps.intelligence.outputs.threat_level }}
      intelligence_confidence: ${{ steps.intelligence.outputs.intelligence_confidence }}
      critical_threats: ${{ steps.intelligence.outputs.critical_threats }}
      mission_status: ${{ steps.intelligence.outputs.mission_status }}
    steps:
      - name: Checkout Patriots Protocol Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python Intelligence Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Intelligence Dependencies
        run: |
          echo "🎖️ Installing Patriots Protocol Intelligence Dependencies..."
          pip install --upgrade pip
          pip install aiohttp feedparser python-dateutil
          
          # Optional OpenAI for enhanced analysis
          pip install openai || echo "⚠️ OpenAI library not available - will use basic analysis"
          
          echo "✅ Dependencies installed successfully"

      - name: Create Intelligence Directory Structure
        run: |
          echo "🛡️ Creating secure intelligence directories..."
          mkdir -p data logs backup
          chmod 750 data logs backup
          
          # Create logs directory with proper permissions
          touch logs/.gitkeep
          
          echo "✅ Intelligence directories configured"

      - name: Execute Cyber Intelligence Mission
        id: intelligence
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MODEL_TOKEN: ${{ secrets.MODEL_TOKEN }}
        run: |
          echo "🎖️ PATRIOTS PROTOCOL v4.0 - Cyber Intelligence Mission Starting..."
          echo "📅 Mission Start: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          echo "🔍 Intelligence Analysis: Professional Grade"
          echo "🛡️ Executing comprehensive cyber threat intelligence analysis..."
          
          # Execute intelligence gathering with logging
          python patriots_ai_intel.py 2>&1 | tee logs/intelligence_mission_$(date +%Y%m%d_%H%M%S).log
          
          # Extract intelligence metrics for workflow outputs
          if [ -f ./data/news-analysis.json ]; then
            echo "✅ Intelligence data generated successfully"
            
            # Extract metrics using Python
            python3 -c "
          import json
          import sys
          import os
          
          try:
              with open('./data/news-analysis.json', 'r') as f:
                  data = json.load(f)
              
              metrics = data.get('metrics', {})
              summary = data.get('intelligence_summary', {})
              
              # Extract key intelligence metrics
              threats_detected = metrics.get('total_threats', 0)
              threat_level = metrics.get('global_threat_level', 'MONITORING')
              intelligence_confidence = metrics.get('intelligence_confidence', 0)
              critical_threats = metrics.get('critical_threats', 0)
              mission_status = summary.get('mission_status', 'UNKNOWN')
              
              # Display intelligence summary
              print(f'🎖️ Patriots Protocol v4.0 Intelligence Summary:')
              print(f'   🎯 Threats Detected: {threats_detected}')
              print(f'   🔥 Global Threat Level: {threat_level}')
              print(f'   🎯 Intelligence Confidence: {intelligence_confidence}%')
              print(f'   ⚠️ Critical Threats: {critical_threats}')
              print(f'   📊 Mission Status: {mission_status}')
              
              # Set GitHub Actions outputs
              with open(os.environ['GITHUB_OUTPUT'], 'a') as gh_output:
                  gh_output.write(f'threats_detected={threats_detected}\\n')
                  gh_output.write(f'threat_level={threat_level}\\n')
                  gh_output.write(f'intelligence_confidence={intelligence_confidence}\\n')
                  gh_output.write(f'critical_threats={critical_threats}\\n')
                  gh_output.write(f'mission_status={mission_status}\\n')
              
          except Exception as e:
              print(f'❌ Intelligence metrics extraction failed: {e}', file=sys.stderr)
              # Set fallback values
              with open(os.environ['GITHUB_OUTPUT'], 'a') as gh_output:
                  gh_output.write('threats_detected=0\\n')
                  gh_output.write('threat_level=OFFLINE\\n')
                  gh_output.write('intelligence_confidence=0\\n')
                  gh_output.write('critical_threats=0\\n')
                  gh_output.write('mission_status=ERROR\\n')
          "
          else
            echo "⚠️ No intelligence data file generated"
            echo "threats_detected=0" >> $GITHUB_OUTPUT
            echo "threat_level=OFFLINE" >> $GITHUB_OUTPUT
            echo "intelligence_confidence=0" >> $GITHUB_OUTPUT
            echo "critical_threats=0" >> $GITHUB_OUTPUT
            echo "mission_status=ERROR" >> $GITHUB_OUTPUT
          fi

      - name: Intelligence Data Validation
        run: |
          echo "🔍 Validating cyber intelligence data integrity..."
          
          if [ -f ./data/news-analysis.json ]; then
            # Validate JSON structure
            python3 -c "
          import json
          import sys
          
          try:
              with open('./data/news-analysis.json', 'r') as f:
                  data = json.load(f)
              
              # Validate required fields
              required_fields = ['articles', 'metrics', 'intelligence_summary']
              missing_fields = [field for field in required_fields if field not in data]
              
              if missing_fields:
                  print(f'❌ Missing required fields: {missing_fields}')
                  sys.exit(1)
              
              articles = data.get('articles', [])
              metrics = data.get('metrics', {})
              
              print(f'✅ Intelligence data validation passed')
              print(f'📊 Threat Reports: {len(articles)}')
              print(f'🎯 Intelligence Quality: {metrics.get(\"intelligence_confidence\", 0)}%')
              print(f'🛡️ Data Integrity: Verified')
              
          except json.JSONDecodeError as e:
              print(f'❌ Invalid JSON format: {e}')
              sys.exit(1)
          except Exception as e:
              print(f'❌ Validation error: {e}')
              sys.exit(1)
          "
          else
            echo "❌ Intelligence data file not found"
            exit 1
          fi

      - name: Create Intelligence Backup
        run: |
          echo "💾 Creating intelligence backup archive..."
          
          if [ -f ./data/news-analysis.json ]; then
            # Create timestamped backup
            mkdir -p backup
            timestamp=$(date +%Y%m%d-%H%M%S)
            cp ./data/news-analysis.json ./backup/patriots-intel-${timestamp}.json
            
            # Compress older backups to save space
            find ./backup -name "*.json" -mtime +1 -exec gzip {} \;
            
            # Keep only last 10 backups (including compressed)
            ls -t ./backup/patriots-intel-* 2>/dev/null | tail -n +11 | xargs rm -f 2>/dev/null || true
            
            echo "✅ Intelligence backup created: patriots-intel-${timestamp}.json"
            
            # Display backup summary
            backup_count=$(ls -1 ./backup/patriots-intel-* 2>/dev/null | wc -l)
            echo "📦 Total backups maintained: ${backup_count}"
          else
            echo "⚠️ No intelligence data to backup"
          fi

      - name: Cleanup Old Intelligence Data
        run: |
          echo "🧹 Cleaning up old intelligence data..."
          
          # Remove old log files (older than retention period)
          find ./logs -name "*.log" -mtime +${INTELLIGENCE_RETENTION_DAYS} -delete 2>/dev/null || true
          
          # Remove old compressed backups
          find ./backup -name "*.gz" -mtime +${INTELLIGENCE_RETENTION_DAYS} -delete 2>/dev/null || true
          
          # Count remaining files
          log_count=$(find ./logs -name "*.log" 2>/dev/null | wc -l)
          backup_count=$(find ./backup -name "*" -type f 2>/dev/null | wc -l)
          
          echo "📁 Log files maintained: ${log_count}"
          echo "📦 Backup files maintained: ${backup_count}"
          echo "✅ Cleanup completed"

      - name: Commit Intelligence Data
        run: |
          # Configure git for Patriots Protocol
          git config --local user.email "patriots-intelligence@cyber.ai"
          git config --local user.name "Patriots Protocol Intelligence v4.0"
          
          # Stage intelligence files
          git add data/news-analysis.json 2>/dev/null || true
          git add logs/ 2>/dev/null || true
          git add backup/ 2>/dev/null || true
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "📋 No new intelligence data to commit"
          else
            # Create professional commit message
            COMMIT_MSG="🎖️ Patriots Protocol v4.0: Cyber Intelligence Update"
            COMMIT_MSG="${COMMIT_MSG}\n\n📅 Mission: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            COMMIT_MSG="${COMMIT_MSG}\n🎯 Threats: ${{ steps.intelligence.outputs.threats_detected }}"
            COMMIT_MSG="${COMMIT_MSG}\n🔥 Level: ${{ steps.intelligence.outputs.threat_level }}"
            COMMIT_MSG="${COMMIT_MSG}\n🎯 Confidence: ${{ steps.intelligence.outputs.intelligence_confidence }}%"
            COMMIT_MSG="${COMMIT_MSG}\n⚠️ Critical: ${{ steps.intelligence.outputs.critical_threats }}"
            COMMIT_MSG="${COMMIT_MSG}\n📊 Status: ${{ steps.intelligence.outputs.mission_status }}"
            COMMIT_MSG="${COMMIT_MSG}\n\n🔗 https://github.com/danishnizmi/Patriots_Protocol"
            
            # Commit with detailed message
            echo -e "$COMMIT_MSG" > commit_message.txt
            git commit -F commit_message.txt
            git push
            
            echo "✅ Intelligence data committed and pushed"
          fi

  deploy-intelligence-dashboard:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: cyber-intelligence-analysis
    if: always() # Deploy even if intelligence gathering had issues
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Pages Configuration
        uses: actions/configure-pages@v5

      - name: Intelligence Dashboard Validation
        run: |
          echo "🌐 Validating Patriots Protocol Intelligence Dashboard..."
          
          # Validate core dashboard files
          if [ -f "index.html" ]; then
            echo "✅ Dashboard interface file found"
            
            # Check for required dashboard elements
            if grep -q "PATRIOTS PROTOCOL" index.html; then
              echo "✅ Dashboard title verified"
            else
              echo "❌ Dashboard title missing"
              exit 1
            fi
            
            if grep -q "CYBER THREAT INTELLIGENCE" index.html; then
              echo "✅ Intelligence interface verified"
            else
              echo "❌ Intelligence interface missing"
              exit 1
            fi
            
          else
            echo "❌ Dashboard interface file missing"
            exit 1
          fi
          
          # Validate intelligence data file
          if [ -f "data/news-analysis.json" ]; then
            echo "✅ Intelligence data file found"
            
            # Basic JSON validation
            python3 -c "
          import json
          
          try:
              with open('data/news-analysis.json', 'r') as f:
                  data = json.load(f)
              
              articles = data.get('articles', [])
              metrics = data.get('metrics', {})
              
              print(f'📊 Intelligence Reports: {len(articles)}')
              print(f'🎯 Threat Level: {metrics.get(\"global_threat_level\", \"UNKNOWN\")}')
              print(f'🎯 Confidence: {metrics.get(\"intelligence_confidence\", 0)}%')
              print('✅ Intelligence data structure valid')
              
          except Exception as e:
              print(f'❌ Intelligence data validation error: {e}')
              exit(1)
          "
            
          else
            echo "❌ Intelligence data file missing"
            exit 1
          fi
          
          echo "🎯 Patriots Protocol Intelligence Dashboard validation complete"

      - name: Upload Dashboard Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy Intelligence Dashboard
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Dashboard Deployment Success
        run: |
          echo "🎖️ ═══════════════════════════════════════════════════════════════════"
          echo "     PATRIOTS PROTOCOL v4.0 - INTELLIGENCE DASHBOARD DEPLOYED"
          echo "  ═══════════════════════════════════════════════════════════════════"
          echo "  🌐 Dashboard URL: ${{ steps.deployment.outputs.page_url }}"
          echo "  🎯 Threats Detected: ${{ needs.cyber-intelligence-analysis.outputs.threats_detected }}"
          echo "  🔥 Threat Level: ${{ needs.cyber-intelligence-analysis.outputs.threat_level }}"
          echo "  🎯 Intelligence Confidence: ${{ needs.cyber-intelligence-analysis.outputs.intelligence_confidence }}%"
          echo "  ⚠️ Critical Threats: ${{ needs.cyber-intelligence-analysis.outputs.critical_threats }}"
          echo "  📊 Mission Status: ${{ needs.cyber-intelligence-analysis.outputs.mission_status }}"
          echo "  🛡️ Security: Professional threat intelligence monitoring"
          echo "  ═══════════════════════════════════════════════════════════════════"

  intelligence-mission-summary:
    runs-on: ubuntu-latest
    needs: [cyber-intelligence-analysis, deploy-intelligence-dashboard]
    if: always()
    steps:
      - name: Patriots Protocol Mission Summary
        run: |
          echo "🎖️ ═══════════════════════════════════════════════════════════════════"
          echo "       PATRIOTS PROTOCOL v4.0 - CYBER INTELLIGENCE MISSION SUMMARY"
          echo "  ═══════════════════════════════════════════════════════════════════"
          echo "  📅 Mission Time: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "  🎯 Threats Detected: ${{ needs.cyber-intelligence-analysis.outputs.threats_detected || '0' }}"
          echo "  🔥 Global Threat Level: ${{ needs.cyber-intelligence-analysis.outputs.threat_level || 'UNKNOWN' }}"
          echo "  🎯 Intelligence Confidence: ${{ needs.cyber-intelligence-analysis.outputs.intelligence_confidence || '0' }}%"
          echo "  ⚠️ Critical Threats: ${{ needs.cyber-intelligence-analysis.outputs.critical_threats || '0' }}"
          echo "  📊 Mission Status: ${{ needs.cyber-intelligence-analysis.outputs.mission_status || 'UNKNOWN' }}"
          echo "  🛡️ Intelligence Network: OPERATIONAL"
          echo "  🗂️ Data Retention: ${INTELLIGENCE_RETENTION_DAYS} days"
          echo "  ═══════════════════════════════════════════════════════════════════"
          
          # Critical threat alert
          CRITICAL_COUNT="${{ needs.cyber-intelligence-analysis.outputs.critical_threats || '0' }}"
          if [ "$CRITICAL_COUNT" -gt "0" ]; then
            echo "🚨 CRITICAL THREAT ALERT: $CRITICAL_COUNT critical threats identified!"
            echo "   Immediate threat assessment and incident response recommended."
            echo "   Review intelligence dashboard for detailed threat analysis."
          else
            echo "✅ No critical threats detected in current intelligence cycle"
          fi
          
          # Mission status assessment
          MISSION_STATUS="${{ needs.cyber-intelligence-analysis.outputs.mission_status || 'UNKNOWN' }}"
          case "$MISSION_STATUS" in
            "OPERATIONAL")
              echo "✅ Patriots Protocol Intelligence Mission: SUCCESS"
              ;;
            "ERROR")
              echo "⚠️ Patriots Protocol Intelligence Mission: PARTIAL SUCCESS"
              echo "   Some intelligence sources may be unavailable"
              ;;
            *)
              echo "❓ Patriots Protocol Intelligence Mission: STATUS UNKNOWN"
              ;;
          esac
          
          echo ""
          echo "🎖️ Patriots Protocol v4.0 Cyber Intelligence Mission Complete."
          echo "   Repository: https://github.com/danishnizmi/Patriots_Protocol"
