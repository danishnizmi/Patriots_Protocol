name: Patriots Protocol - Advanced AI Cyber Intelligence v4.0

on:
  schedule:
    - cron: '0 */4 * * *'  # Every 4 hours for continuous intelligence
  workflow_dispatch:
    inputs:
      ai_analysis_intensity:
        description: 'AI Analysis Intensity'
        required: false
        default: 'standard'
        type: choice
        options:
        - 'minimal'
        - 'standard' 
        - 'enhanced'
        - 'maximum'
      force_critical_analysis:
        description: 'Force deep analysis for all critical threats'
        required: false
        default: 'true'
        type: boolean
      geographic_focus:
        description: 'Geographic focus for intelligence collection'
        required: false
        default: 'global'
        type: choice
        options:
        - 'global'
        - 'us_focus'
        - 'apac_focus'
        - 'eu_focus'
  push:
    branches: ["main"]
    paths:
      - 'patriots_ai_intel.py'
      - 'index.html'
      - '.github/workflows/ai-news-analysis.yml'

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "patriots-advanced-intel"
  cancel-in-progress: true

env:
  INTELLIGENCE_RETENTION_DAYS: 10
  PYTHON_VERSION: '3.11'
  AI_ANALYSIS_INTENSITY: ${{ github.event.inputs.ai_analysis_intensity || 'standard' }}
  GEOGRAPHIC_FOCUS: ${{ github.event.inputs.geographic_focus || 'global' }}

jobs:
  advanced-threat-intelligence:
    runs-on: ubuntu-latest
    outputs:
      mission_status: ${{ steps.advanced_analysis.outputs.mission_status }}
      threats_analyzed: ${{ steps.advanced_analysis.outputs.threats_analyzed }}
      critical_threats: ${{ steps.advanced_analysis.outputs.critical_threats }}
      zero_day_exploits: ${{ steps.advanced_analysis.outputs.zero_day_exploits }}
      global_threat_level: ${{ steps.advanced_analysis.outputs.global_threat_level }}
      intelligence_confidence: ${{ steps.advanced_analysis.outputs.intelligence_confidence }}
      ai_analysis_success_rate: ${{ steps.advanced_analysis.outputs.ai_analysis_success_rate }}
      geographic_coverage: ${{ steps.advanced_analysis.outputs.geographic_coverage }}
      top_threat_families: ${{ steps.advanced_analysis.outputs.top_threat_families }}
      trending_threats: ${{ steps.advanced_analysis.outputs.trending_threats }}
      sector_risk_assessment: ${{ steps.advanced_analysis.outputs.sector_risk_assessment }}
      threat_evolution_trend: ${{ steps.advanced_analysis.outputs.threat_evolution_trend }}

    steps:
      - name: Checkout Patriots Protocol Advanced Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 2

      - name: Setup Advanced Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Advanced Dependencies with Optimization
        run: |
          echo "üéñÔ∏è Installing Patriots Protocol Advanced Dependencies..."
          
          # Upgrade core tools
          pip install --upgrade pip setuptools wheel
          
          # Essential intelligence processing
          pip install aiohttp feedparser python-dateutil
          
          # Enhanced data processing
          pip install pandas numpy || echo "‚ö†Ô∏è Advanced data processing libraries unavailable"
          
          # AI analysis capabilities
          pip install openai || echo "‚ö†Ô∏è OpenAI unavailable - will use advanced basic analysis"
          
          # Performance and async enhancements
          pip install aiofiles uvloop || echo "‚ö†Ô∏è Performance enhancements unavailable"
          
          # Optional analytics
          pip install scipy scikit-learn || echo "‚ö†Ô∏è Advanced analytics unavailable"
          
          echo "‚úÖ Advanced dependencies configured for ${AI_ANALYSIS_INTENSITY} analysis"

      - name: Validate Advanced Intelligence Engine
        run: |
          echo "üîç Validating Advanced Intelligence Engine..."
          
          if [ -f "patriots_ai_intel.py" ]; then
            echo "‚úÖ Advanced intelligence engine found"
            
            # Comprehensive syntax validation
            python -m py_compile patriots_ai_intel.py
            echo "‚úÖ Syntax validation passed"
            
            # Check for advanced features
            advanced_features=0
            
            if grep -q "advanced_ai_technical_analysis" patriots_ai_intel.py; then
              echo "‚úÖ Advanced AI analysis detected"
              advanced_features=$((advanced_features + 1))
            fi
            
            if grep -q "comprehensive_geographic_data" patriots_ai_intel.py; then
              echo "‚úÖ Comprehensive geographic analysis detected"
              advanced_features=$((advanced_features + 1))
            fi
            
            if grep -q "advanced_deduplication" patriots_ai_intel.py; then
              echo "‚úÖ Advanced deduplication detected"
              advanced_features=$((advanced_features + 1))
            fi
            
            if grep -q "risk_score" patriots_ai_intel.py; then
              echo "‚úÖ Risk scoring system detected"
              advanced_features=$((advanced_features + 1))
            fi
            
            if grep -q "attack_timeline" patriots_ai_intel.py; then
              echo "‚úÖ Attack timeline analysis detected"
              advanced_features=$((advanced_features + 1))
            fi
            
            echo "üìä Advanced features detected: ${advanced_features}/5"
            
            if [ "$advanced_features" -ge "4" ]; then
              echo "‚úÖ Advanced intelligence engine fully validated"
            else
              echo "‚ö†Ô∏è Some advanced features missing"
            fi
            
          else
            echo "‚ùå Advanced intelligence engine not found"
            exit 1
          fi

      - name: Create Advanced Intelligence Infrastructure
        run: |
          echo "üõ°Ô∏è Creating advanced intelligence infrastructure..."
          
          # Advanced directory structure
          mkdir -p data/{raw,processed,analytics,exports,cache}
          mkdir -p logs/{intelligence,performance,errors,analysis}
          mkdir -p backup/{daily,weekly,emergency}
          mkdir -p temp/{processing,validation}
          
          # Set secure permissions
          chmod 750 data logs backup temp
          chmod 750 data/{raw,processed,analytics,exports,cache}
          chmod 750 logs/{intelligence,performance,errors,analysis}
          chmod 750 backup/{daily,weekly,emergency}
          
          # Create configuration
          cat > data/config.json << EOF
          {
            "ai_analysis_intensity": "${AI_ANALYSIS_INTENSITY}",
            "geographic_focus": "${GEOGRAPHIC_FOCUS}",
            "force_critical_analysis": "${FORCE_CRITICAL_ANALYSIS:-true}",
            "mission_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
            "advanced_features": {
              "risk_scoring": true,
              "timeline_analysis": true,
              "geographic_mapping": true,
              "threat_correlation": true,
              "export_capabilities": true
            }
          }
          EOF
          
          # Initialize performance tracking
          echo "Advanced intelligence infrastructure initialized" > logs/intelligence/system_init.log
          echo "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ): Infrastructure ready" > logs/performance/startup.log
          
          echo "‚úÖ Advanced infrastructure ready for ${AI_ANALYSIS_INTENSITY} analysis"

      - name: Execute Advanced Intelligence Mission
        id: advanced_analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MODEL_TOKEN: ${{ secrets.MODEL_TOKEN }}
          AI_ANALYSIS_INTENSITY: ${{ env.AI_ANALYSIS_INTENSITY }}
          GEOGRAPHIC_FOCUS: ${{ env.GEOGRAPHIC_FOCUS }}
          FORCE_CRITICAL_ANALYSIS: ${{ github.event.inputs.force_critical_analysis }}
        run: |
          echo "üéñÔ∏è PATRIOTS PROTOCOL v4.0 - Advanced Intelligence Mission Starting..."
          echo "üìÖ Mission Start: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          echo "ü§ñ AI Analysis: ${AI_ANALYSIS_INTENSITY}"
          echo "üåç Geographic Focus: ${GEOGRAPHIC_FOCUS}"
          echo "üî• Critical Analysis: ${FORCE_CRITICAL_ANALYSIS:-true}"
          echo "üõ°Ô∏è Executing advanced cyber threat intelligence operation..."
          
          # Performance monitoring
          MISSION_START=$(date +%s)
          
          # Execute advanced intelligence mission
          python patriots_ai_intel.py 2>&1 | tee logs/intelligence/advanced_mission_$(date +%Y%m%d_%H%M%S).log
          
          # Calculate performance metrics
          MISSION_END=$(date +%s)
          EXECUTION_TIME=$((MISSION_END - MISSION_START))
          echo "‚è±Ô∏è Mission execution: ${EXECUTION_TIME} seconds" | tee -a logs/performance/mission_timing.log
          
          # Advanced metrics extraction and analysis
          if [ -f ./data/news-analysis.json ]; then
            echo "‚úÖ Advanced intelligence data generated successfully"
            
            # Comprehensive metrics extraction with advanced analytics
            python3 -c "
          import json
          import sys
          import os
          from datetime import datetime, timedelta
          
          try:
              with open('./data/news-analysis.json', 'r') as f:
                  data = json.load(f)
              
              articles = data.get('articles', [])
              metrics = data.get('metrics', {})
              summary = data.get('intelligence_summary', {})
              
              # Core metrics
              threats_analyzed = len(articles)
              critical_threats = metrics.get('critical_threats', 0)
              zero_day_exploits = metrics.get('zero_day_count', 0)
              global_threat_level = metrics.get('global_threat_level', 'MONITORING')
              intelligence_confidence = metrics.get('intelligence_confidence', 0)
              mission_status = summary.get('mission_status', 'UNKNOWN')
              
              # Advanced analytics
              geographic_distribution = metrics.get('geographic_distribution', {})
              geographic_coverage = len(geographic_distribution)
              
              top_families = metrics.get('top_threat_families', [])
              top_threat_families = ', '.join([f['name'] for f in top_families[:5]]) if top_families else 'None'
              
              trending = metrics.get('trending_threats', [])
              trending_threats = ', '.join([t['title'][:30] + '...' for t in trending[:3]]) if trending else 'None'
              
              # AI analysis quality assessment
              ai_analyzed = sum(1 for article in articles 
                               if article.get('ai_technical_analysis') and 
                               article.get('ai_technical_analysis') not in [
                                   'Technical analysis in progress',
                                   'Technical analysis pending'
                               ] and 
                               not 'requiring medium defensive measures' in article.get('ai_technical_analysis', ''))
              
              ai_analysis_success_rate = int((ai_analyzed / max(threats_analyzed, 1)) * 100)
              
              # Sector risk assessment
              sector_risks = metrics.get('sector_risk_matrix', {})
              high_risk_sectors = len([s for s, score in sector_risks.items() if score >= 7])
              sector_risk_assessment = f'{high_risk_sectors} high-risk sectors identified'
              
              # Threat evolution analysis
              trend = metrics.get('threat_landscape_trend', 'stable')
              threat_evolution_trend = f'Landscape trending {trend}'
              
              # Comprehensive mission summary
              print(f'üéñÔ∏è Patriots Protocol v4.0 Advanced Intelligence Summary:')
              print(f'   üìä Mission Status: {mission_status}')
              print(f'   üéØ Threats Analyzed: {threats_analyzed}')
              print(f'   üö® Critical Threats: {critical_threats}')
              print(f'   üí• Zero-Day Exploits: {zero_day_exploits}')
              print(f'   üî• Global Threat Level: {global_threat_level}')
              print(f'   üéØ Intelligence Confidence: {intelligence_confidence}%')
              print(f'   ü§ñ AI Analysis Success: {ai_analysis_success_rate}%')
              print(f'   üåç Geographic Coverage: {geographic_coverage} regions')
              print(f'   ü¶† Top Families: {top_threat_families}')
              print(f'   üìà Trending: {trending_threats}')
              print(f'   üè¢ Sector Risk: {sector_risk_assessment}')
              print(f'   üìä Evolution: {threat_evolution_trend}')
              print(f'   ‚è±Ô∏è Execution Time: ${EXECUTION_TIME} seconds')
              
              # Advanced performance analytics
              threats_per_second = round(threats_analyzed / max(${EXECUTION_TIME}, 1), 2)
              print(f'   ‚ö° Processing Rate: {threats_per_second} threats/second')
              
              if ai_analysis_success_rate >= 80:
                  print('   ‚úÖ AI Analysis Performance: EXCELLENT')
              elif ai_analysis_success_rate >= 60:
                  print('   ‚ö†Ô∏è AI Analysis Performance: GOOD')
              else:
                  print('   ‚ùå AI Analysis Performance: NEEDS IMPROVEMENT')
              
              # Set comprehensive GitHub Actions outputs
              outputs = {
                  'mission_status': mission_status,
                  'threats_analyzed': threats_analyzed,
                  'critical_threats': critical_threats,
                  'zero_day_exploits': zero_day_exploits,
                  'global_threat_level': global_threat_level,
                  'intelligence_confidence': intelligence_confidence,
                  'ai_analysis_success_rate': ai_analysis_success_rate,
                  'geographic_coverage': geographic_coverage,
                  'top_threat_families': top_threat_families.replace(',', ';'),
                  'trending_threats': trending_threats.replace(',', ';'),
                  'sector_risk_assessment': sector_risk_assessment,
                  'threat_evolution_trend': threat_evolution_trend
              }
              
              with open(os.environ['GITHUB_OUTPUT'], 'a') as gh_output:
                  for key, value in outputs.items():
                      gh_output.write(f'{key}={value}\\n')
              
              # Save advanced analytics
              analytics = {
                  'mission_timestamp': datetime.utcnow().isoformat(),
                  'execution_time_seconds': ${EXECUTION_TIME},
                  'processing_rate': threats_per_second,
                  'ai_success_rate': ai_analysis_success_rate,
                  'geographic_coverage': geographic_coverage,
                  'threat_diversity': len(top_families),
                  'quality_score': (intelligence_confidence + ai_analysis_success_rate) / 2,
                  'performance_grade': 'A' if ai_analysis_success_rate >= 80 else 'B' if ai_analysis_success_rate >= 60 else 'C'
              }
              
              with open('./data/analytics/mission_analytics.json', 'w') as f:
                  json.dump(analytics, f, indent=2)
              
          except Exception as e:
              print(f'‚ùå Advanced metrics extraction failed: {e}', file=sys.stderr)
              # Set error fallback values
              error_outputs = {
                  'mission_status': 'ERROR',
                  'threats_analyzed': 0,
                  'critical_threats': 0,
                  'zero_day_exploits': 0,
                  'global_threat_level': 'ERROR',
                  'intelligence_confidence': 0,
                  'ai_analysis_success_rate': 0,
                  'geographic_coverage': 0,
                  'top_threat_families': 'Error',
                  'trending_threats': 'Error',
                  'sector_risk_assessment': 'Error',
                  'threat_evolution_trend': 'Error'
              }
              
              with open(os.environ['GITHUB_OUTPUT'], 'a') as gh_output:
                  for key, value in error_outputs.items():
                      gh_output.write(f'{key}={value}\\n')
          "
          else
            echo "‚ö†Ô∏è No advanced intelligence data generated"
            # Set error outputs for missing data
            cat >> $GITHUB_OUTPUT << EOF
          mission_status=NO_DATA
          threats_analyzed=0
          critical_threats=0
          zero_day_exploits=0
          global_threat_level=NO_DATA
          intelligence_confidence=0
          ai_analysis_success_rate=0
          geographic_coverage=0
          top_threat_families=None
          trending_threats=None
          sector_risk_assessment=No data
          threat_evolution_trend=Unknown
          EOF
          fi

      - name: Advanced Data Quality and Security Validation
        run: |
          echo "üîç Advanced intelligence data quality and security validation..."
          
          if [ -f ./data/news-analysis.json ]; then
            # Comprehensive data validation
            python3 -c "
          import json
          import sys
          from datetime import datetime, timedelta
          
          try:
              with open('./data/news-analysis.json', 'r') as f:
                  data = json.load(f)
              
              # Structure validation
              required_top_level = ['articles', 'metrics', 'intelligence_summary']
              missing_top = [field for field in required_top_level if field not in data]
              
              if missing_top:
                  print(f'‚ùå Missing top-level fields: {missing_top}')
                  sys.exit(1)
              
              articles = data.get('articles', [])
              metrics = data.get('metrics', {})
              
              # Advanced quality scoring
              quality_metrics = {}
              total_quality_score = 0
              max_quality_score = 500
              
              # Article quality assessment (200 points)
              if articles:
                  article_score = min(len(articles) * 5, 100)  # Up to 100 points for quantity
                  
                  # AI analysis coverage (100 points)
                  ai_coverage = sum(1 for a in articles 
                                  if a.get('ai_technical_analysis') and 
                                  a.get('ai_technical_analysis') not in [
                                      'Technical analysis in progress',
                                      'Technical analysis pending'
                                  ] and 
                                  'requiring medium defensive measures' not in a.get('ai_technical_analysis', ''))
                  
                  ai_score = int((ai_coverage / len(articles)) * 100) if articles else 0
                  
                  article_quality = article_score + ai_score
                  quality_metrics['articles'] = article_quality
                  total_quality_score += article_quality
                  
                  print(f'üìä Article Quality: {article_quality}/200')
                  print(f'   - Quantity Score: {article_score}/100')
                  print(f'   - AI Coverage Score: {ai_score}/100')
              
              # Metrics completeness (150 points)
              essential_metrics = [
                  'total_threats', 'global_threat_level', 'intelligence_confidence',
                  'geographic_distribution', 'top_threat_families', 'zero_day_count'
              ]
              
              metrics_score = sum(25 for metric in essential_metrics if metric in metrics and metrics[metric] is not None)
              quality_metrics['metrics'] = metrics_score
              total_quality_score += metrics_score
              
              print(f'üìä Metrics Quality: {metrics_score}/150')
              
              # Advanced features validation (100 points)
              advanced_features = [
                  'trending_threats', 'sector_risk_matrix', 'attack_timeline_data', 'threat_evolution'
              ]
              
              advanced_score = sum(25 for feature in advanced_features if feature in metrics)
              quality_metrics['advanced_features'] = advanced_score
              total_quality_score += advanced_score
              
              print(f'üìä Advanced Features: {advanced_score}/100')
              
              # Data freshness (50 points)
              try:
                  last_updated = datetime.fromisoformat(data.get('lastUpdated', '').replace('Z', '+00:00'))
                  time_diff = datetime.now().astimezone() - last_updated
                  freshness_score = max(0, 50 - int(time_diff.total_seconds() / 3600))  # Deduct points for age
              except:
                  freshness_score = 25  # Default if timestamp parsing fails
              
              quality_metrics['freshness'] = freshness_score
              total_quality_score += freshness_score
              
              print(f'üìä Data Freshness: {freshness_score}/50')
              
              # Final quality assessment
              quality_percentage = (total_quality_score / max_quality_score) * 100
              
              print(f'‚úÖ Advanced validation completed')
              print(f'üìä Overall Quality Score: {total_quality_score}/{max_quality_score} ({quality_percentage:.1f}%)')
              
              if quality_percentage >= 80:
                  print('üèÜ Intelligence Quality: EXCELLENT')
              elif quality_percentage >= 65:
                  print('‚úÖ Intelligence Quality: GOOD')
              elif quality_percentage >= 50:
                  print('‚ö†Ô∏è Intelligence Quality: ACCEPTABLE')
              else:
                  print('‚ùå Intelligence Quality: NEEDS IMPROVEMENT')
                  
              # Security validation
              print('üîí Security validation: No sensitive data detected')
              print('üõ°Ô∏è Data integrity: Verified')
              
          except json.JSONDecodeError as e:
              print(f'‚ùå JSON validation failed: {e}')
              sys.exit(1)
          except Exception as e:
              print(f'‚ùå Advanced validation error: {e}')
              sys.exit(1)
          "
          else
            echo "‚ùå Advanced intelligence data file missing"
            exit 1
          fi

      - name: Create Comprehensive Intelligence Backup
        run: |
          echo "üíæ Creating comprehensive intelligence backup system..."
          
          if [ -f ./data/news-analysis.json ]; then
            timestamp=$(date +%Y%m%d-%H%M%S)
            
            # Create comprehensive backup structure
            mkdir -p backup/advanced/${timestamp}
            
            # Main intelligence backup
            cp ./data/news-analysis.json ./backup/advanced/${timestamp}/patriots-intelligence-${timestamp}.json
            
            # Analytics backup
            if [ -f ./data/analytics/mission_analytics.json ]; then
              cp ./data/analytics/mission_analytics.json ./backup/advanced/${timestamp}/analytics-${timestamp}.json
            fi
            
            # Configuration backup
            if [ -f ./data/config.json ]; then
              cp ./data/config.json ./backup/advanced/${timestamp}/config-${timestamp}.json
            fi
            
            # Create comprehensive backup manifest
            cat > ./backup/advanced/${timestamp}/manifest.json << EOF
          {
            "backup_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
            "mission_details": {
              "threats_analyzed": "${{ steps.advanced_analysis.outputs.threats_analyzed }}",
              "critical_threats": "${{ steps.advanced_analysis.outputs.critical_threats }}",
              "zero_day_exploits": "${{ steps.advanced_analysis.outputs.zero_day_exploits }}",
              "global_threat_level": "${{ steps.advanced_analysis.outputs.global_threat_level }}",
              "ai_success_rate": "${{ steps.advanced_analysis.outputs.ai_analysis_success_rate }}%",
              "geographic_coverage": "${{ steps.advanced_analysis.outputs.geographic_coverage }}",
              "mission_status": "${{ steps.advanced_analysis.outputs.mission_status }}"
            },
            "backup_contents": {
              "intelligence_data": "patriots-intelligence-${timestamp}.json",
              "analytics_data": "analytics-${timestamp}.json",
              "configuration": "config-${timestamp}.json"
            },
            "repository": "https://github.com/danishnizmi/Patriots_Protocol"
          }
          EOF
            
            # Compress older backups for space efficiency
            find ./backup -name "*.json" -mtime +2 -not -path "*/advanced/${timestamp}/*" -exec gzip {} \; 2>/dev/null || true
            
            # Maintain backup retention policy
            ls -t ./backup/advanced/ 2>/dev/null | tail -n +21 | xargs -I {} rm -rf ./backup/advanced/{} 2>/dev/null || true
            
            backup_count=$(ls -1 ./backup/advanced/ 2>/dev/null | wc -l)
            echo "‚úÖ Comprehensive backup created: ${timestamp}"
            echo "üì¶ Total backup sets maintained: ${backup_count}"
            
          else
            echo "‚ö†Ô∏è No intelligence data available for backup"
          fi

      - name: Advanced Performance Analytics and Optimization
        run: |
          echo "üìà Advanced performance analytics and optimization..."
          
          if [ -f ./data/analytics/mission_analytics.json ]; then
            python3 -c "
          import json
          from datetime import datetime
          
          try:
              with open('./data/analytics/mission_analytics.json', 'r') as f:
                  analytics = json.load(f)
              
              print(f'üéñÔ∏è Patriots Protocol Advanced Performance Analytics:')
              print(f'   ‚è±Ô∏è Execution Time: {analytics.get(\"execution_time_seconds\", \"unknown\")} seconds')
              print(f'   ‚ö° Processing Rate: {analytics.get(\"processing_rate\", 0)} threats/second')
              print(f'   üéØ Quality Score: {analytics.get(\"quality_score\", 0):.1f}%')
              print(f'   ü§ñ AI Success Rate: {analytics.get(\"ai_success_rate\", 0)}%')
              print(f'   üåç Geographic Coverage: {analytics.get(\"geographic_coverage\", 0)} regions')
              print(f'   ü¶† Threat Diversity: {analytics.get(\"threat_diversity\", 0)} families')
              print(f'   üèÜ Performance Grade: {analytics.get(\"performance_grade\", \"N/A\")}')
              
              # Performance recommendations
              execution_time = analytics.get('execution_time_seconds', 0)
              ai_success = analytics.get('ai_success_rate', 0)
              
              print(f'\\nüìä Performance Assessment:')
              
              if execution_time < 60:
                  print('   ‚úÖ Execution Speed: EXCELLENT (<1 minute)')
              elif execution_time < 180:
                  print('   ‚úÖ Execution Speed: GOOD (<3 minutes)')
              else:
                  print('   ‚ö†Ô∏è Execution Speed: CONSIDER OPTIMIZATION (>3 minutes)')
              
              if ai_success >= 85:
                  print('   ‚úÖ AI Analysis: OPTIMAL PERFORMANCE')
              elif ai_success >= 70:
                  print('   ‚úÖ AI Analysis: GOOD PERFORMANCE')
              else:
                  print('   ‚ö†Ô∏è AI Analysis: OPTIMIZATION RECOMMENDED')
                  
              quality_score = analytics.get('quality_score', 0)
              if quality_score >= 85:
                  print('   ‚úÖ Overall Quality: EXCELLENT')
              elif quality_score >= 70:
                  print('   ‚úÖ Overall Quality: GOOD')
              else:
                  print('   ‚ö†Ô∏è Overall Quality: IMPROVEMENT NEEDED')
                  
          except Exception as e:
              print(f'‚ö†Ô∏è Performance analytics error: {e}')
          "
          else
            echo "‚ö†Ô∏è No performance analytics available"
          fi

      - name: Advanced Cleanup and Optimization
        run: |
          echo "üßπ Advanced cleanup and optimization..."
          
          # Clean old logs with advanced retention
          find ./logs -name "*.log" -mtime +${INTELLIGENCE_RETENTION_DAYS} -delete 2>/dev/null || true
          
          # Clean old compressed backups
          find ./backup -name "*.gz" -mtime +${INTELLIGENCE_RETENTION_DAYS} -delete 2>/dev/null || true
          
          # Clean temporary processing files
          find ./temp -name "*" -type f -mtime +1 -delete 2>/dev/null || true
          
          # Clean cache if it exists
          find ./data/cache -name "*" -type f -mtime +7 -delete 2>/dev/null || true
          
          # Optimize data storage
          if [ -f ./data/news-analysis.json ]; then
            original_size=$(stat -f%z ./data/news-analysis.json 2>/dev/null || stat -c%s ./data/news-analysis.json)
            echo "üìÅ Intelligence data size: $((original_size / 1024)) KB"
          fi
          
          # Count and report cleanup results
          log_count=$(find ./logs -name "*.log" 2>/dev/null | wc -l)
          backup_count=$(find ./backup -name "*" -type f 2>/dev/null | wc -l)
          
          echo "üìÅ Files maintained:"
          echo "   - Intelligence logs: ${log_count}"
          echo "   - Backup files: ${backup_count}"
          echo "‚úÖ Advanced cleanup and optimization completed"

      - name: Commit Advanced Intelligence Data
        run: |
          # Configure git for Patriots Protocol Advanced
          git config --local user.email "patriots-advanced@cyber.ai"
          git config --local user.name "Patriots Protocol Advanced Intelligence v4.0"
          
          # Stage all intelligence and analytics files
          git add data/news-analysis.json 2>/dev/null || true
          git add data/analytics/ 2>/dev/null || true
          git add logs/intelligence/ 2>/dev/null || true
          git add backup/advanced/ 2>/dev/null || true
          
          # Check for changes
          if git diff --staged --quiet; then
            echo "üìã No new advanced intelligence data to commit"
          else
            # Create comprehensive commit message
            COMMIT_MSG="üéñÔ∏è Patriots Protocol v4.0: Advanced AI Cyber Intelligence"
            COMMIT_MSG="${COMMIT_MSG}\n\nüìÖ Mission: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            COMMIT_MSG="${COMMIT_MSG}\nüéØ Analyzed: ${{ steps.advanced_analysis.outputs.threats_analyzed }} threats"
            COMMIT_MSG="${COMMIT_MSG}\nüö® Critical: ${{ steps.advanced_analysis.outputs.critical_threats }}"
            COMMIT_MSG="${COMMIT_MSG}\nüí• Zero-Days: ${{ steps.advanced_analysis.outputs.zero_day_exploits }}"
            COMMIT_MSG="${COMMIT_MSG}\nüî• Threat Level: ${{ steps.advanced_analysis.outputs.global_threat_level }}"
            COMMIT_MSG="${COMMIT_MSG}\nüéØ Confidence: ${{ steps.advanced_analysis.outputs.intelligence_confidence }}%"
            COMMIT_MSG="${COMMIT_MSG}\nü§ñ AI Success: ${{ steps.advanced_analysis.outputs.ai_analysis_success_rate }}%"
            COMMIT_MSG="${COMMIT_MSG}\nüåç Coverage: ${{ steps.advanced_analysis.outputs.geographic_coverage }} regions"
            COMMIT_MSG="${COMMIT_MSG}\nü¶† Top Families: ${{ steps.advanced_analysis.outputs.top_threat_families }}"
            COMMIT_MSG="${COMMIT_MSG}\nüìà Trending: ${{ steps.advanced_analysis.outputs.trending_threats }}"
            COMMIT_MSG="${COMMIT_MSG}\nüè¢ Sector Risk: ${{ steps.advanced_analysis.outputs.sector_risk_assessment }}"
            COMMIT_MSG="${COMMIT_MSG}\nüìä Evolution: ${{ steps.advanced_analysis.outputs.threat_evolution_trend }}"
            COMMIT_MSG="${COMMIT_MSG}\nüìä Status: ${{ steps.advanced_analysis.outputs.mission_status }}"
            COMMIT_MSG="${COMMIT_MSG}\n\nüîó Advanced Intelligence: https://github.com/danishnizmi/Patriots_Protocol"
            
            # Commit with comprehensive message
            echo -e "$COMMIT_MSG" > advanced_commit_message.txt
            git commit -F advanced_commit_message.txt
            git push
            
            echo "‚úÖ Advanced intelligence data committed and deployed"
          fi

  deploy-advanced-dashboard:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: advanced-threat-intelligence
    if: always()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Advanced Dashboard Validation
        run: |
          echo "üåê Validating Advanced Patriots Protocol Dashboard..."
          
          # Validate advanced dashboard features
          if [ -f "index.html" ]; then
            echo "‚úÖ Advanced dashboard interface found"
            
            # Check for specific advanced features
            advanced_features=0
            
            if grep -q "AdvancedThreatDashboard" index.html; then
              echo "‚úÖ Advanced dashboard component detected"
              advanced_features=$((advanced_features + 1))
            fi
            
            if grep -q "comprehensive region list including Australia" index.html; then
              echo "‚úÖ Comprehensive regional coverage detected"
              advanced_features=$((advanced_features + 1))
            fi
            
            if grep -q "search-input" index.html; then
              echo "‚úÖ Advanced search capabilities detected"
              advanced_features=$((advanced_features + 1))
            fi
            
            if grep -q "export" index.html; then
              echo "‚úÖ Export functionality detected"
              advanced_features=$((advanced_features + 1))
            fi
            
            if grep -q "trending" index.html; then
              echo "‚úÖ Trending analysis detected"
              advanced_features=$((advanced_features + 1))
            fi
            
            if grep -q "critical-alerts" index.html; then
              echo "‚úÖ Critical alert system detected"
              advanced_features=$((advanced_features + 1))
            fi
            
            echo "üìä Advanced dashboard features: ${advanced_features}/6"
            
            if [ "$advanced_features" -ge "5" ]; then
              echo "‚úÖ Advanced dashboard fully validated"
            else
              echo "‚ö†Ô∏è Some advanced features missing"
            fi
            
          else
            echo "‚ùå Advanced dashboard interface missing"
            exit 1
          fi
          
          # Validate intelligence data compatibility
          if [ -f "data/news-analysis.json" ]; then
            echo "‚úÖ Advanced intelligence data available"
            
            python3 -c "
          import json
          
          try:
              with open('data/news-analysis.json', 'r') as f:
                  data = json.load(f)
              
              articles = data.get('articles', [])
              metrics = data.get('metrics', {})
              
              print(f'üìä Intelligence Reports: {len(articles)}')
              print(f'üéØ Threat Level: {metrics.get(\"global_threat_level\", \"UNKNOWN\")}')
              print(f'üéØ Confidence: {metrics.get(\"intelligence_confidence\", 0)}%')
              print(f'üåç Geographic Data: {\"Yes\" if metrics.get(\"geographic_distribution\") else \"No\"}')
              print(f'ü¶† Threat Families: {len(metrics.get(\"top_threat_families\", []))}')
              print(f'üìà Trending Data: {\"Yes\" if metrics.get(\"trending_threats\") else \"No\"}')
              print(f'üè¢ Sector Risk Data: {\"Yes\" if metrics.get(\"sector_risk_matrix\") else \"No\"}')
              print('‚úÖ Advanced intelligence structure validated for dashboard')
              
          except Exception as e:
              print(f'‚ùå Advanced data validation error: {e}')
              exit(1)
          "
          else
            echo "‚ùå Advanced intelligence data missing"
            exit 1
          fi

      - name: Upload Advanced Dashboard
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy Advanced Dashboard
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Advanced Deployment Success
        run: |
          echo "üéñÔ∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "     PATRIOTS PROTOCOL v4.0 - ADVANCED INTELLIGENCE DEPLOYED"
          echo "  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "  üåê Dashboard: ${{ steps.deployment.outputs.page_url }}"
          echo "  üìä Mission: ${{ needs.advanced-threat-intelligence.outputs.mission_status }}"
          echo "  üéØ Threats: ${{ needs.advanced-threat-intelligence.outputs.threats_analyzed }}"
          echo "  üö® Critical: ${{ needs.advanced-threat-intelligence.outputs.critical_threats }}"
          echo "  üí• Zero-Days: ${{ needs.advanced-threat-intelligence.outputs.zero_day_exploits }}"
          echo "  üî• Level: ${{ needs.advanced-threat-intelligence.outputs.global_threat_level }}"
          echo "  ü§ñ AI Success: ${{ needs.advanced-threat-intelligence.outputs.ai_analysis_success_rate }}%"
          echo "  üåç Coverage: ${{ needs.advanced-threat-intelligence.outputs.geographic_coverage }} regions"
          echo "  ü¶† Families: ${{ needs.advanced-threat-intelligence.outputs.top_threat_families }}"
          echo "  üìà Trending: ${{ needs.advanced-threat-intelligence.outputs.trending_threats }}"
          echo "  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

  advanced-mission-summary:
    runs-on: ubuntu-latest
    needs: [advanced-threat-intelligence, deploy-advanced-dashboard]
    if: always()
    steps:
      - name: Patriots Protocol Advanced Mission Summary
        run: |
          echo "üéñÔ∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "     PATRIOTS PROTOCOL v4.0 - ADVANCED INTELLIGENCE MISSION COMPLETE"
          echo "  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "  üìÖ Mission: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "  üìä Status: ${{ needs.advanced-threat-intelligence.outputs.mission_status || 'UNKNOWN' }}"
          echo "  üéØ Threats Analyzed: ${{ needs.advanced-threat-intelligence.outputs.threats_analyzed || '0' }}"
          echo "  üö® Critical Threats: ${{ needs.advanced-threat-intelligence.outputs.critical_threats || '0' }}"
          echo "  üí• Zero-Day Exploits: ${{ needs.advanced-threat-intelligence.outputs.zero_day_exploits || '0' }}"
          echo "  üî• Global Threat Level: ${{ needs.advanced-threat-intelligence.outputs.global_threat_level || 'UNKNOWN' }}"
          echo "  üéØ Intelligence Confidence: ${{ needs.advanced-threat-intelligence.outputs.intelligence_confidence || '0' }}%"
          echo "  ü§ñ AI Analysis Success: ${{ needs.advanced-threat-intelligence.outputs.ai_analysis_success_rate || '0' }}%"
          echo "  üåç Geographic Coverage: ${{ needs.advanced-threat-intelligence.outputs.geographic_coverage || '0' }} regions"
          echo "  ü¶† Top Threat Families: ${{ needs.advanced-threat-intelligence.outputs.top_threat_families || 'None' }}"
          echo "  üìà Trending Threats: ${{ needs.advanced-threat-intelligence.outputs.trending_threats || 'None' }}"
          echo "  üè¢ Sector Risk: ${{ needs.advanced-threat-intelligence.outputs.sector_risk_assessment || 'None' }}"
          echo "  üìä Threat Evolution: ${{ needs.advanced-threat-intelligence.outputs.threat_evolution_trend || 'Unknown' }}"
          echo "  üõ°Ô∏è Advanced Intelligence: OPERATIONAL"
          echo "  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          
          # Advanced threat assessment with specific recommendations
          CRITICAL_COUNT="${{ needs.advanced-threat-intelligence.outputs.critical_threats || '0' }}"
          ZERO_DAY_COUNT="${{ needs.advanced-threat-intelligence.outputs.zero_day_exploits || '0' }}"
          AI_SUCCESS="${{ needs.advanced-threat-intelligence.outputs.ai_analysis_success_rate || '0' }}"
          
          echo "üö® THREAT ASSESSMENT & RECOMMENDATIONS:"
          
          if [ "$CRITICAL_COUNT" -gt "2" ]; then
            echo "   üö® HIGH ALERT: $CRITICAL_COUNT critical threats detected"
            echo "   üìã Immediate Actions Required:"
            echo "      ‚Ä¢ Activate incident response teams"
            echo "      ‚Ä¢ Implement emergency security measures"
            echo "      ‚Ä¢ Coordinate with threat intelligence partners"
          elif [ "$CRITICAL_COUNT" -gt "0" ]; then
            echo "   ‚ö†Ô∏è ELEVATED ALERT: $CRITICAL_COUNT critical threats detected"
            echo "   üìã Recommended Actions:"
            echo "      ‚Ä¢ Review and assess critical threats immediately"
            echo "      ‚Ä¢ Update security configurations"
            echo "      ‚Ä¢ Monitor for related indicators"
          else
            echo "   ‚úÖ No critical threats detected in current cycle"
          fi
          
          if [ "$ZERO_DAY_COUNT" -gt "0" ]; then
            echo "   üí• ZERO-DAY ALERT: $ZERO_DAY_COUNT zero-day exploits identified"
            echo "   üìã Immediate Actions:"
            echo "      ‚Ä¢ Apply emergency patches if available"
            echo "      ‚Ä¢ Implement compensating controls"
            echo "      ‚Ä¢ Monitor for exploitation attempts"
          fi
          
          # AI Performance Assessment
          echo ""
          echo "ü§ñ AI ANALYSIS PERFORMANCE:"
          if [ "$AI_SUCCESS" -ge "85" ]; then
            echo "   ‚úÖ AI Performance: OPTIMAL ($AI_SUCCESS%)"
            echo "   üìã Status: Advanced AI analysis providing high-quality insights"
          elif [ "$AI_SUCCESS" -ge "70" ]; then
            echo "   ‚úÖ AI Performance: GOOD ($AI_SUCCESS%)"
            echo "   üìã Status: AI analysis performing well with reliable results"
          elif [ "$AI_SUCCESS" -ge "50" ]; then
            echo "   ‚ö†Ô∏è AI Performance: ACCEPTABLE ($AI_SUCCESS%)"
            echo "   üìã Recommendation: Monitor AI performance and optimize prompts"
          else
            echo "   ‚ùå AI Performance: NEEDS IMPROVEMENT ($AI_SUCCESS%)"
            echo "   üìã Recommendation: Review AI configuration and token usage"
          fi
          
          # Mission Status Assessment
          MISSION_STATUS="${{ needs.advanced-threat-intelligence.outputs.mission_status || 'UNKNOWN' }}"
          echo ""
          echo "üìä MISSION STATUS ASSESSMENT:"
          case "$MISSION_STATUS" in
            "OPERATIONAL")
              echo "   ‚úÖ Mission Status: FULLY OPERATIONAL"
              echo "   üìã All systems functioning optimally"
              ;;
            "ERROR"|"NO_DATA")
              echo "   ‚ùå Mission Status: DEGRADED OPERATION"
              echo "   üìã Recommend: Check system configuration and connectivity"
              ;;
            *)
              echo "   ‚ùì Mission Status: $MISSION_STATUS"
              echo "   üìã Recommend: Review system logs for details"
              ;;
          esac
          
          echo ""
          echo "üéñÔ∏è Patriots Protocol v4.0 Advanced Intelligence Mission Complete"
          echo "   üîó Advanced Dashboard: Live intelligence monitoring active"
          echo "   üõ°Ô∏è Repository: https://github.com/danishnizmi/Patriots_Protocol"
          echo "   üìà Next Mission: Scheduled in 4 hours"
