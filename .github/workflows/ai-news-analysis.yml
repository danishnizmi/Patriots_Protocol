name: Patriots Protocol - Cyber Threat Intelligence

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      - 'patriots_intel.py'
      - 'index.html'
      - '.github/workflows/ai-news-analysis.yml'

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "patriots-intelligence"
  cancel-in-progress: true

jobs:
  threat-intelligence:
    runs-on: ubuntu-latest
    outputs:
      mission_status: ${{ steps.analysis.outputs.mission_status }}
      threats_analyzed: ${{ steps.analysis.outputs.threats_analyzed }}
      critical_threats: ${{ steps.analysis.outputs.critical_threats }}
      global_threat_level: ${{ steps.analysis.outputs.global_threat_level }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          echo "Installing Patriots Protocol dependencies..."
          pip install --upgrade pip
          pip install aiohttp feedparser python-dateutil

      - name: Validate Intelligence Engine
        run: |
          echo "Validating intelligence engine..."
          if [ -f "patriots_intel.py" ]; then
            echo "✅ Intelligence engine found"
            python -m py_compile patriots_intel.py
            echo "✅ Syntax validation passed"
          else
            echo "❌ Intelligence engine not found"
            exit 1
          fi

      - name: Execute Intelligence Mission
        id: analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MODEL_TOKEN: ${{ secrets.MODEL_TOKEN }}
        run: |
          echo "🎖️ Starting Patriots Protocol Intelligence Mission..."
          echo "📅 Mission Start: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          
          python patriots_intel.py 2>&1 | tee intelligence.log
          
          if [ -f ./data/news-analysis.json ]; then
            echo "✅ Intelligence data generated successfully"
            
            python3 -c "
import json
import os

try:
    with open('./data/news-analysis.json', 'r') as f:
        data = json.load(f)
    
    metrics = data.get('metrics', {})
    summary = data.get('intelligence_summary', {})
    
    threats_analyzed = len(data.get('articles', []))
    critical_threats = metrics.get('critical_threats', 0)
    global_threat_level = metrics.get('global_threat_level', 'MONITORING')
    mission_status = summary.get('mission_status', 'OPERATIONAL')
    
    print(f'🎖️ Patriots Protocol Intelligence Summary:')
    print(f'   📊 Mission Status: {mission_status}')
    print(f'   🎯 Threats Analyzed: {threats_analyzed}')
    print(f'   🚨 Critical Threats: {critical_threats}')
    print(f'   🔥 Global Threat Level: {global_threat_level}')
    
    with open(os.environ['GITHUB_OUTPUT'], 'a') as gh_output:
        gh_output.write(f'mission_status={mission_status}\n')
        gh_output.write(f'threats_analyzed={threats_analyzed}\n')
        gh_output.write(f'critical_threats={critical_threats}\n')
        gh_output.write(f'global_threat_level={global_threat_level}\n')
    
    print(f'\n🎖️ Patriots Protocol Intelligence Mission: COMPLETE')
    
except Exception as e:
    print(f'❌ Metrics extraction failed: {e}')
    with open(os.environ['GITHUB_OUTPUT'], 'a') as gh_output:
        gh_output.write('mission_status=ERROR\n')
        gh_output.write('threats_analyzed=0\n')
        gh_output.write('critical_threats=0\n')
        gh_output.write('global_threat_level=ERROR\n')
"
          else
            echo "⚠️ No intelligence data generated"
            cat >> $GITHUB_OUTPUT << EOF
mission_status=NO_DATA
threats_analyzed=0
critical_threats=0
global_threat_level=NO_DATA
EOF
          fi

      - name: Validate Data Structure
        run: |
          echo "🔍 Validating data structure..."
          
          if [ -f ./data/news-analysis.json ]; then
            python3 -c "
import json
import sys

try:
    with open('./data/news-analysis.json', 'r') as f:
        data = json.load(f)
    
    required_fields = ['articles', 'metrics', 'intelligence_summary']
    missing = [field for field in required_fields if field not in data]
    
    if missing:
        print(f'❌ Missing required fields: {missing}')
        sys.exit(1)
    
    articles = data.get('articles', [])
    print(f'✅ Validation passed: {len(articles)} threats processed')
    
except Exception as e:
    print(f'❌ Validation failed: {e}')
    sys.exit(1)
"
            echo "✅ Data structure validation completed"
          else
            echo "❌ Intelligence data file missing"
            exit 1
          fi

      - name: Commit Intelligence Data
        run: |
          git config --local user.email "patriots@cyber.ai"
          git config --local user.name "Patriots Protocol Intelligence"
          
          git add data/news-analysis.json 2>/dev/null || true
          
          if git diff --staged --quiet; then
            echo "📋 No new intelligence data to commit"
          else
            COMMIT_MSG="🎖️ Patriots Protocol: Cyber Threat Intelligence Update"
            COMMIT_MSG="${COMMIT_MSG}\n\n📅 Mission: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            COMMIT_MSG="${COMMIT_MSG}\n🎯 Analyzed: ${{ steps.analysis.outputs.threats_analyzed }} threats"
            COMMIT_MSG="${COMMIT_MSG}\n🚨 Critical: ${{ steps.analysis.outputs.critical_threats }}"
            COMMIT_MSG="${COMMIT_MSG}\n🔥 Threat Level: ${{ steps.analysis.outputs.global_threat_level }}"
            COMMIT_MSG="${COMMIT_MSG}\n📊 Status: ${{ steps.analysis.outputs.mission_status }}"
            
            echo -e "$COMMIT_MSG" > commit_message.txt
            git commit -F commit_message.txt
            git push
            
            echo "✅ Intelligence data committed and deployed"
          fi

  deploy-dashboard:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: threat-intelligence
    if: always()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Validate Dashboard
        run: |
          echo "🌐 Validating Patriots Protocol Dashboard..."
          
          if [ -f "index.html" ]; then
            echo "✅ Dashboard found"
            
            if grep -q "PATRIOTS PROTOCOL" index.html; then
              echo "✅ Dashboard title found"
            else
              echo "❌ Dashboard title missing"
              exit 1
            fi
            
            if grep -q "CYBER THREAT INTELLIGENCE" index.html; then
              echo "✅ Intelligence content found"
            else
              echo "❌ Intelligence content missing"
              exit 1
            fi
            
          else
            echo "❌ Dashboard not found"
            exit 1
          fi

      - name: Upload Dashboard
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy Dashboard
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Deployment Success
        run: |
          echo "🎖️ ═══════════════════════════════════════════════════"
          echo "     PATRIOTS PROTOCOL - INTELLIGENCE DEPLOYED"
          echo "  ═══════════════════════════════════════════════════"
          echo "  🌐 Dashboard: ${{ steps.deployment.outputs.page_url }}"
          echo "  📊 Mission: ${{ needs.threat-intelligence.outputs.mission_status }}"
          echo "  🎯 Threats: ${{ needs.threat-intelligence.outputs.threats_analyzed }}"
          echo "  🚨 Critical: ${{ needs.threat-intelligence.outputs.critical_threats }}"
          echo "  🔥 Level: ${{ needs.threat-intelligence.outputs.global_threat_level }}"
          echo "  ⏰ Next Update: 6 hours"
          echo "  ═══════════════════════════════════════════════════"

  mission-summary:
    runs-on: ubuntu-latest
    needs: [threat-intelligence, deploy-dashboard]
    if: always()
    steps:
      - name: Patriots Protocol Mission Summary
        run: |
          echo "🎖️ ═══════════════════════════════════════════════════"
          echo "     PATRIOTS PROTOCOL - INTELLIGENCE MISSION COMPLETE"
          echo "  ═══════════════════════════════════════════════════"
          echo "  📅 Mission: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "  📊 Status: ${{ needs.threat-intelligence.outputs.mission_status || 'UNKNOWN' }}"
          echo "  🎯 Threats Analyzed: ${{ needs.threat-intelligence.outputs.threats_analyzed || '0' }}"
          echo "  🚨 Critical Threats: ${{ needs.threat-intelligence.outputs.critical_threats || '0' }}"
          echo "  🔥 Global Threat Level: ${{ needs.threat-intelligence.outputs.global_threat_level || 'UNKNOWN' }}"
          echo "  🛡️ Intelligence: OPERATIONAL"
          echo "  ⏰ Update Frequency: Every 6 hours"
          echo "  ═══════════════════════════════════════════════════"
          
          CRITICAL_COUNT="${{ needs.threat-intelligence.outputs.critical_threats || '0' }}"
          
          echo "🚨 THREAT ASSESSMENT:"
          
          if [ "$CRITICAL_COUNT" -gt "2" ]; then
            echo "   🚨 CRITICAL ALERT: $CRITICAL_COUNT critical threats detected"
            echo "   📋 Immediate attention required"
          elif [ "$CRITICAL_COUNT" -gt "0" ]; then
            echo "   ⚠️ ELEVATED ALERT: $CRITICAL_COUNT critical threats detected"
            echo "   📋 Monitoring and response recommended"
          else
            echo "   ✅ Threat level stable - standard monitoring active"
          fi
          
          echo ""
          echo "🎖️ Patriots Protocol Intelligence Mission Complete"
          echo "   🔗 Dashboard: Live threat intelligence monitoring"
          echo "   🛡️ Repository: https://github.com/danishnizmi/Patriots_Protocol"
          echo "   📈 Next Mission: Scheduled in 6 hours"
          echo "   💎 Status: OPERATIONAL"
