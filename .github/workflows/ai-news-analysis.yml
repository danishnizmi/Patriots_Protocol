name: Patriots Protocol - Tactical AI Cyber Intelligence v4.2

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours for tactical intelligence
  workflow_dispatch:
    inputs:
      tactical_mode:
        description: 'Tactical Analysis Mode'
        required: false
        default: 'tactical_sitrep'
        type: choice
        options:
        - 'tactical_sitrep'
        - 'enhanced_basic'
        - 'maximum_analysis'
      threat_focus:
        description: 'Threat Intelligence Focus'
        required: false
        default: 'global'
        type: choice
        options:
        - 'global'
        - 'critical_infrastructure'
        - 'zero_day_focus'
        - 'apt_campaigns'
      force_protection_level:
        description: 'Force Protection Level Override'
        required: false
        default: 'auto'
        type: choice
        options:
        - 'auto'
        - 'critical'
        - 'high'
        - 'medium'
        - 'low'
  push:
    branches: ["main"]
    paths:
      - 'patriots_ai_intel.py'
      - 'index.html'
      - '.github/workflows/ai-news-analysis.yml'

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "patriots-tactical-intel-v42"
  cancel-in-progress: true

env:
  TACTICAL_RETENTION_DAYS: 30
  PYTHON_VERSION: '3.11'
  TACTICAL_MODE: ${{ github.event.inputs.tactical_mode || 'tactical_sitrep' }}
  THREAT_FOCUS: ${{ github.event.inputs.threat_focus || 'global' }}
  FORCE_PROTECTION: ${{ github.event.inputs.force_protection_level || 'auto' }}
  TACTICAL_VERSION: "4.2"

jobs:
  tactical-threat-intelligence:
    runs-on: ubuntu-latest
    outputs:
      mission_status: ${{ steps.tactical_analysis.outputs.mission_status }}
      threats_analyzed: ${{ steps.tactical_analysis.outputs.threats_analyzed }}
      critical_threats: ${{ steps.tactical_analysis.outputs.critical_threats }}
      zero_day_activity: ${{ steps.tactical_analysis.outputs.zero_day_activity }}
      threatcon_level: ${{ steps.tactical_analysis.outputs.threatcon_level }}
      intelligence_confidence: ${{ steps.tactical_analysis.outputs.intelligence_confidence }}
      ai_insights_quality: ${{ steps.tactical_analysis.outputs.ai_insights_quality }}
      tactical_readiness: ${{ steps.tactical_analysis.outputs.tactical_readiness }}
      force_protection_status: ${{ steps.tactical_analysis.outputs.force_protection_status }}
      threat_evolution: ${{ steps.tactical_analysis.outputs.threat_evolution }}

    steps:
      - name: Checkout Patriots Protocol Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 2

      - name: Setup Tactical Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Tactical Dependencies
        run: |
          echo "üéñÔ∏è Installing Patriots Protocol Tactical Dependencies v4.2..."
          
          pip install --upgrade pip setuptools wheel
          
          # Core tactical intelligence processing
          pip install aiohttp==3.9.0 feedparser==6.0.10 python-dateutil==2.8.2
          
          # Enhanced data processing for tactical analysis
          pip install pandas numpy || echo "‚ö†Ô∏è Advanced data processing libraries unavailable"
          
          # AI analysis capabilities for tactical intelligence
          pip install openai==1.3.0 || echo "‚ö†Ô∏è OpenAI unavailable - will use enhanced tactical analysis"
          
          # Performance and reliability enhancements
          pip install aiofiles tenacity || echo "‚ö†Ô∏è Performance enhancements unavailable"
          
          echo "‚úÖ Tactical dependencies v4.2 configured for ${TACTICAL_MODE} analysis"

      - name: Validate Tactical Intelligence Engine v4.2
        run: |
          echo "üîç Validating Tactical Intelligence Engine v4.2..."
          
          if [ -f "patriots_ai_intel.py" ]; then
            echo "‚úÖ Tactical intelligence engine found"
            
            # Comprehensive syntax validation
            python -m py_compile patriots_ai_intel.py
            echo "‚úÖ Syntax validation passed"
            
            # Tactical feature detection
            tactical_features=0
            
            if grep -q "TacticalPatriotsIntelligence" patriots_ai_intel.py; then
              echo "‚úÖ Tactical intelligence class detected"
              tactical_features=$((tactical_features + 1))
            fi
            
            if grep -q "generate_tactical_sitrep" patriots_ai_intel.py; then
              echo "‚úÖ Tactical SITREP generation detected"
              tactical_features=$((tactical_features + 1))
            fi
            
            if grep -q "TacticalSituationReport" patriots_ai_intel.py; then
              echo "‚úÖ Tactical SITREP structure detected"
              tactical_features=$((tactical_features + 1))
            fi
            
            if grep -q "enhanced_tactical_analysis" patriots_ai_intel.py; then
              echo "‚úÖ Enhanced tactical analysis detected"
              tactical_features=$((tactical_features + 1))
            fi
            
            if grep -q "calculate_tactical_metrics" patriots_ai_intel.py; then
              echo "‚úÖ Tactical metrics calculation detected"
              tactical_features=$((tactical_features + 1))
            fi
            
            if grep -q "risk_factors" patriots_ai_intel.py; then
              echo "‚úÖ Advanced risk assessment detected"
              tactical_features=$((tactical_features + 1))
            fi
            
            echo "üìä Tactical features detected: ${tactical_features}/6"
            
            if [ "$tactical_features" -ge "5" ]; then
              echo "‚úÖ Tactical intelligence engine v4.2 fully validated"
            else
              echo "‚ö†Ô∏è Some tactical features missing - continuing with available features"
            fi
            
          else
            echo "‚ùå Tactical intelligence engine not found"
            exit 1
          fi

      - name: Create Tactical Intelligence Infrastructure v4.2
        run: |
          echo "üõ°Ô∏è Creating tactical intelligence infrastructure v4.2..."
          
          # Tactical directory structure
          mkdir -p data/{raw,processed,tactical,exports,cache,backups}
          mkdir -p logs/{tactical,performance,errors,audit,sitrep}
          mkdir -p backup/{tactical,emergency,archive}
          mkdir -p cache/{feeds,analysis,metrics,sitrep}
          
          # Set tactical permissions
          chmod 750 data logs backup cache
          chmod 750 data/{raw,processed,tactical,exports,cache,backups}
          chmod 750 logs/{tactical,performance,errors,audit,sitrep}
          chmod 750 cache/{feeds,analysis,metrics,sitrep}
          
          # Create tactical configuration
          cat > data/tactical_config.json << EOF
          {
            "version": "4.2",
            "tactical_mode": "${TACTICAL_MODE}",
            "threat_focus": "${THREAT_FOCUS}",
            "force_protection_level": "${FORCE_PROTECTION}",
            "mission_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
            "operational_mode": "TACTICAL_INTELLIGENCE",
            "enhanced_features": {
              "tactical_sitrep": true,
              "enhanced_risk_assessment": true,
              "force_protection_analysis": true,
              "threat_actor_tracking": true,
              "mgs_interface": true,
              "recommended_reads": true
            },
            "tactical_targets": {
              "ai_quality_threshold": 90,
              "sitrep_confidence": 95,
              "intelligence_confidence_min": 85,
              "response_time_max": 300
            },
            "risk_assessment": {
              "impact_weighting": 0.4,
              "probability_weighting": 0.3,
              "sophistication_weighting": 0.3,
              "minimum_risk_score": 1,
              "maximum_risk_score": 10
            }
          }
          EOF
          
          echo "Tactical intelligence infrastructure v4.2 initialized" > logs/tactical/system_init_v42.log
          echo "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ): Tactical infrastructure v4.2 ready for ${TACTICAL_MODE} analysis" > logs/performance/startup.log
          
          echo "‚úÖ Tactical infrastructure v4.2 ready with enhanced capabilities"

      - name: Execute Tactical Intelligence Mission v4.2
        id: tactical_analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MODEL_TOKEN: ${{ secrets.MODEL_TOKEN }}
          TACTICAL_MODE: ${{ env.TACTICAL_MODE }}
          THREAT_FOCUS: ${{ env.THREAT_FOCUS }}
          FORCE_PROTECTION: ${{ env.FORCE_PROTECTION }}
        run: |
          echo "üéñÔ∏è PATRIOTS PROTOCOL v4.2 - Tactical Intelligence Mission Starting..."
          echo "üìÖ Mission Start: $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)"
          echo "ü§ñ Tactical Mode: ${TACTICAL_MODE}"
          echo "üéØ Threat Focus: ${THREAT_FOCUS}"
          echo "üõ°Ô∏è Force Protection: ${FORCE_PROTECTION}"
          echo "üíé Enhanced Features: Tactical SITREP, Risk Assessment, MGS Interface"
          echo "üî• Executing tactical cyber threat intelligence operation v4.2..."
          
          # Tactical mission monitoring
          MISSION_START=$(date +%s)
          
          # Execute tactical intelligence mission with comprehensive logging
          python patriots_ai_intel.py 2>&1 | tee logs/tactical/tactical_mission_v42_$(date +%Y%m%d_%H%M%S).log
          
          # Calculate tactical performance metrics
          MISSION_END=$(date +%s)
          EXECUTION_TIME=$((MISSION_END - MISSION_START))
          echo "‚è±Ô∏è Mission execution: ${EXECUTION_TIME} seconds" | tee -a logs/performance/mission_timing.log
          
          # Enhanced tactical metrics extraction
          if [ -f ./data/news-analysis.json ]; then
            echo "‚úÖ Tactical intelligence data v4.2 generated successfully"
            
            python3 -c "
import json
import sys
import os
from datetime import datetime

try:
    with open('./data/news-analysis.json', 'r') as f:
        data = json.load(f)
    
    articles = data.get('articles', [])
    metrics = data.get('metrics', {})
    summary = data.get('intelligence_summary', {})
    ai_usage = data.get('ai_usage', {})
    tactical_sitrep = data.get('daily_summary', {})
    
    # Core tactical metrics with proper defaults
    threats_analyzed = len(articles)
    critical_threats = metrics.get('critical_threats', 0)
    high_threats = metrics.get('high_threats', 0)
    medium_threats = metrics.get('medium_threats', 0)
    low_threats = metrics.get('low_threats', 0)
    zero_day_activity = metrics.get('zero_day_count', 0)
    threatcon_level = metrics.get('global_threat_level', 'MONITORING')
    intelligence_confidence = metrics.get('intelligence_confidence', 0)
    mission_status = summary.get('mission_status', 'UNKNOWN')
    
    # Enhanced tactical v4.2 metrics
    ai_insights_quality = metrics.get('ai_insights_quality', 0)
    tactical_readiness = metrics.get('tactical_readiness', 'UNKNOWN')
    force_protection_status = metrics.get('force_protection_status', 'NORMAL')
    threat_evolution = metrics.get('threat_evolution', 'stable')
    sitrep_generated = ai_usage.get('tactical_sitrep_generated', False)
    
    # Tactical mission summary
    print(f'üéñÔ∏è Patriots Protocol v4.2 Tactical Intelligence Summary:')
    print(f'   üìä Mission Status: {mission_status}')
    print(f'   üéØ Threats Analyzed: {threats_analyzed}')
    print(f'   üö® Critical Threats: {critical_threats}')
    print(f'   üìà High Threats: {high_threats}')
    print(f'   üìä Medium Threats: {medium_threats}')
    print(f'   üìâ Low Threats: {low_threats}')
    print(f'   üí• Zero-Day Activity: {zero_day_activity}')
    print(f'   üî• THREATCON Level: {threatcon_level}')
    print(f'   üéØ Intelligence Confidence: {intelligence_confidence}%')
    print(f'   ü§ñ AI Insights Quality: {ai_insights_quality}%')
    print(f'   üõ°Ô∏è Tactical Readiness: {tactical_readiness}')
    print(f'   üõ°Ô∏è Force Protection: {force_protection_status}')
    print(f'   üìà Threat Evolution: {threat_evolution}')
    print(f'   üìã Tactical SITREP Generated: {'Yes' if sitrep_generated else 'No'}')
    print(f'   ‚è±Ô∏è Execution Time: ${EXECUTION_TIME} seconds')
    
    # Enhanced tactical performance assessment
    tactical_indicators = []
    if ai_insights_quality >= 85:
        tactical_indicators.append('High AI Quality')
    if intelligence_confidence >= 85:
        tactical_indicators.append('High Intelligence Confidence')
    if tactical_readiness in ['GREEN', 'YELLOW']:
        tactical_indicators.append('Good Tactical Readiness')
    if zero_day_activity == 0:
        tactical_indicators.append('No Zero-Day Threats')
    if sitrep_generated:
        tactical_indicators.append('SITREP Generated')
    
    if len(tactical_indicators) >= 4:
        print('   ‚úÖ Tactical Performance: EXCELLENT (v4.2 Optimal)')
    elif len(tactical_indicators) >= 3:
        print('   ‚úÖ Tactical Performance: VERY GOOD (v4.2 Enhanced)')
    elif len(tactical_indicators) >= 2:
        print('   ‚úÖ Tactical Performance: GOOD (v4.2 Standard)')
    else:
        print('   ‚ö†Ô∏è Tactical Performance: OPTIMIZATION NEEDED')
    
    # Tactical value assessment
    tactical_value = 0
    if critical_threats > 0: 
        tactical_value += 1
    if zero_day_activity > 0: 
        tactical_value += 1
    if ai_insights_quality >= 85: 
        tactical_value += 1
    if sitrep_generated: 
        tactical_value += 1
    if tactical_readiness in ['GREEN', 'YELLOW']:
        tactical_value += 1
    
    value_levels = ['Minimal', 'Basic', 'Standard', 'High', 'Maximum']
    value_level = value_levels[min(tactical_value, 4)]
    print(f'   üíé Tactical Value: {tactical_value}/5 ({value_level})')
    
    # Set GitHub Actions outputs with tactical metrics
    outputs = {
        'mission_status': mission_status,
        'threats_analyzed': threats_analyzed,
        'critical_threats': critical_threats,
        'zero_day_activity': zero_day_activity,
        'threatcon_level': threatcon_level,
        'intelligence_confidence': intelligence_confidence,
        'ai_insights_quality': ai_insights_quality,
        'tactical_readiness': tactical_readiness,
        'force_protection_status': force_protection_status,
        'threat_evolution': threat_evolution
    }
    
    with open(os.environ['GITHUB_OUTPUT'], 'a') as gh_output:
        for key, value in outputs.items():
            gh_output.write(f'{key}={value}\\n')
    
    print(f'\\nüéñÔ∏è Patriots Protocol v4.2 Tactical Intelligence Mission: COMPLETE')
    
except Exception as e:
    print(f'‚ùå Tactical metrics extraction failed: {e}', file=sys.stderr)
    # Set tactical error fallback values
    error_outputs = {
        'mission_status': 'ERROR',
        'threats_analyzed': 0,
        'critical_threats': 0,
        'zero_day_activity': 0,
        'threatcon_level': 'ERROR',
        'intelligence_confidence': 0,
        'ai_insights_quality': 0,
        'tactical_readiness': 'OFFLINE',
        'force_protection_status': 'UNKNOWN',
        'threat_evolution': 'unknown'
    }
    
    with open(os.environ['GITHUB_OUTPUT'], 'a') as gh_output:
        for key, value in error_outputs.items():
            gh_output.write(f'{key}={value}\\n')
    sys.exit(1)
"
          else
            echo "‚ö†Ô∏è No tactical intelligence data generated"
            cat >> $GITHUB_OUTPUT << EOF
mission_status=NO_DATA
threats_analyzed=0
critical_threats=0
zero_day_activity=0
threatcon_level=NO_DATA
intelligence_confidence=0
ai_insights_quality=0
tactical_readiness=OFFLINE
force_protection_status=UNKNOWN
threat_evolution=unknown
EOF
          fi

      - name: Tactical Data Validation and Backup v4.2
        run: |
          echo "üîç Tactical data validation and backup v4.2..."
          
          if [ -f ./data/news-analysis.json ]; then
            # Comprehensive JSON structure validation
            python3 -c "
import json
import sys

try:
    with open('./data/news-analysis.json', 'r') as f:
        data = json.load(f)
    
    # Enhanced validation for tactical v4.2 structure
    required_fields = ['articles', 'metrics', 'intelligence_summary', 'ai_usage', 'version']
    missing = [field for field in required_fields if field not in data]
    
    if missing:
        print(f'‚ùå Missing required fields: {missing}')
        sys.exit(1)
    
    # Validate version
    if data.get('version') != '4.2':
        print(f'‚ö†Ô∏è Version mismatch: expected 4.2, got {data.get(\"version\")}')
    
    # Validate tactical structure
    articles = data.get('articles', [])
    tactical_sitrep = data.get('daily_summary', {})
    
    print(f'‚úÖ Tactical validation passed: {len(articles)} threats analyzed')
    
    # Validate tactical SITREP structure
    if tactical_sitrep and 'executive_summary' in tactical_sitrep:
        print(f'‚úÖ Tactical SITREP validation passed')
        if 'tactical_recommendations' in tactical_sitrep:
            print(f'‚úÖ Tactical recommendations detected')
        if 'force_protection_level' in tactical_sitrep:
            print(f'‚úÖ Force protection assessment detected')
    else:
        print(f'‚ö†Ô∏è Tactical SITREP structure incomplete')
    
    # Validate enhanced metrics structure
    metrics = data.get('metrics', {})
    tactical_metrics = ['total_threats', 'global_threat_level', 'ai_insights_quality', 'tactical_readiness']
    missing_metrics = [m for m in tactical_metrics if m not in metrics]
    
    if missing_metrics:
        print(f'‚ö†Ô∏è Missing tactical metrics: {missing_metrics}')
    else:
        print(f'‚úÖ Tactical metrics validation passed')
    
    # Validate enhanced risk assessment
    has_enhanced_risk = False
    for article in articles[:3]:  # Check first 3
        if 'risk_factors' in article or 'tactical_impact' in article:
            has_enhanced_risk = True
            break
    
    if has_enhanced_risk:
        print(f'‚úÖ Enhanced risk assessment detected')
    else:
        print(f'‚ö†Ô∏è Enhanced risk assessment missing')
    
except Exception as e:
    print(f'‚ùå Tactical validation failed: {e}')
    sys.exit(1)
"
          
            # Create tactical backup with metadata
            timestamp=$(date +%Y%m%d-%H%M%S)
            mkdir -p backup/tactical/v42/${timestamp}
            
            # Copy tactical intelligence data with metadata
            cp ./data/news-analysis.json ./backup/tactical/v42/${timestamp}/tactical-intel-v42-${timestamp}.json
            
            # Create tactical backup metadata
            cat > ./backup/tactical/v42/${timestamp}/tactical_metadata.json << EOF
{
  "backup_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
  "version": "4.2",
  "tactical_mode": "${TACTICAL_MODE}",
  "threat_focus": "${THREAT_FOCUS}",
  "threats_count": $(jq '.articles | length' ./data/news-analysis.json 2>/dev/null || echo 0),
  "mission_status": "$(jq -r '.intelligence_summary.mission_status // "UNKNOWN"' ./data/news-analysis.json 2>/dev/null)",
  "threatcon_level": "$(jq -r '.metrics.global_threat_level // "UNKNOWN"' ./data/news-analysis.json 2>/dev/null)",
  "tactical_readiness": "$(jq -r '.metrics.tactical_readiness // "UNKNOWN"' ./data/news-analysis.json 2>/dev/null)",
  "ai_insights_quality": $(jq '.metrics.ai_insights_quality // 0' ./data/news-analysis.json 2>/dev/null || echo 0),
  "sitrep_available": $(jq 'has("daily_summary")' ./data/news-analysis.json 2>/dev/null || echo false),
  "backup_size": $(stat -f%z ./data/news-analysis.json 2>/dev/null || stat -c%s ./data/news-analysis.json 2>/dev/null || echo 0)
}
EOF
            
            echo "‚úÖ Tactical validation and backup v4.2 completed with metadata"
          else
            echo "‚ùå Tactical intelligence data file missing"
            exit 1
          fi

      - name: Commit Tactical Intelligence Data v4.2
        run: |
          # Configure git with tactical identity
          git config --local user.email "patriots-tactical-v42@cyber.mil"
          git config --local user.name "Patriots Protocol Tactical Intelligence v4.2"
          
          # Stage tactical files
          git add data/news-analysis.json 2>/dev/null || true
          git add logs/tactical/ 2>/dev/null || true
          git add backup/tactical/v42/ 2>/dev/null || true
          
          # Check for changes
          if git diff --staged --quiet; then
            echo "üìã No new tactical intelligence data to commit"
          else
            # Create tactical commit message with full metrics
            COMMIT_MSG="üéñÔ∏è Patriots Protocol v4.2: Tactical Intelligence Operation"
            COMMIT_MSG="${COMMIT_MSG}\n\nüìÖ Mission: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            COMMIT_MSG="${COMMIT_MSG}\nüéØ Analyzed: ${{ steps.tactical_analysis.outputs.threats_analyzed }} threats"
            COMMIT_MSG="${COMMIT_MSG}\nüö® Critical: ${{ steps.tactical_analysis.outputs.critical_threats }}"
            COMMIT_MSG="${COMMIT_MSG}\nüí• Zero-Day: ${{ steps.tactical_analysis.outputs.zero_day_activity }}"
            COMMIT_MSG="${COMMIT_MSG}\nüî• THREATCON: ${{ steps.tactical_analysis.outputs.threatcon_level }}"
            COMMIT_MSG="${COMMIT_MSG}\nüéØ Confidence: ${{ steps.tactical_analysis.outputs.intelligence_confidence }}%"
            COMMIT_MSG="${COMMIT_MSG}\nü§ñ AI Quality: ${{ steps.tactical_analysis.outputs.ai_insights_quality }}%"
            COMMIT_MSG="${COMMIT_MSG}\nüõ°Ô∏è Readiness: ${{ steps.tactical_analysis.outputs.tactical_readiness }}"
            COMMIT_MSG="${COMMIT_MSG}\nüõ°Ô∏è Force Protection: ${{ steps.tactical_analysis.outputs.force_protection_status }}"
            COMMIT_MSG="${COMMIT_MSG}\nüìà Evolution: ${{ steps.tactical_analysis.outputs.threat_evolution }}"
            COMMIT_MSG="${COMMIT_MSG}\nüìä Status: ${{ steps.tactical_analysis.outputs.mission_status }}"
            COMMIT_MSG="${COMMIT_MSG}\n\nüîó Tactical Intelligence v4.2: https://github.com/danishnizmi/Patriots_Protocol"
            COMMIT_MSG="${COMMIT_MSG}\nüíé Features: Tactical SITREP ‚Ä¢ Enhanced Risk ‚Ä¢ MGS Interface ‚Ä¢ AI Recommendations"
            
            echo -e "$COMMIT_MSG" > tactical_commit_message_v42.txt
            git commit -F tactical_commit_message_v42.txt
            git push
            
            echo "‚úÖ Tactical intelligence data v4.2 committed and deployed"
          fi

  deploy-tactical-dashboard:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: tactical-threat-intelligence
    if: always()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Tactical Dashboard Validation v4.2
        run: |
          echo "üåê Validating Tactical Patriots Protocol Dashboard v4.2..."
          
          if [ -f "index.html" ]; then
            echo "‚úÖ Tactical dashboard found"
            
            # Comprehensive tactical feature detection for v4.2
            tactical_features=0
            
            if grep -q "TacticalDashboard" index.html; then
              echo "‚úÖ Tactical dashboard component detected"
              tactical_features=$((tactical_features + 1))
            fi
            
            if grep -q "renderTacticalBriefing" index.html; then
              echo "‚úÖ Tactical briefing rendering detected"
              tactical_features=$((tactical_features + 1))
            fi
            
            if grep -q "tactical-briefing" index.html; then
              echo "‚úÖ Tactical briefing UI components detected"
              tactical_features=$((tactical_features + 1))
            fi
            
            if grep -q "risk-matrix" index.html; then
              echo "‚úÖ Risk assessment matrix detected"
              tactical_features=$((tactical_features + 1))
            fi
            
            if grep -q "tactical-grid" index.html; then
              echo "‚úÖ MGS-style tactical grid detected"
              tactical_features=$((tactical_features + 1))
            fi
            
            if grep -q "intel-feeds" index.html; then
              echo "‚úÖ Recommended intel feeds detected"
              tactical_features=$((tactical_features + 1))
            fi
            
            if grep -q "risk-factors" index.html; then
              echo "‚úÖ Enhanced risk factors display detected"
              tactical_features=$((tactical_features + 1))
            fi
            
            if grep -q "TACTICAL.*v4\.2" index.html; then
              echo "‚úÖ Tactical version 4.2 branding detected"
              tactical_features=$((tactical_features + 1))
            fi
            
            echo "üìä Tactical dashboard features: ${tactical_features}/8"
            
            if [ "$tactical_features" -ge "6" ]; then
              echo "‚úÖ Tactical dashboard v4.2 fully validated"
            else
              echo "‚ö†Ô∏è Some tactical features missing - dashboard will still function"
            fi
          else
            echo "‚ùå Tactical dashboard missing"
            exit 1
          fi

      - name: Upload Tactical Dashboard
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy Tactical Dashboard
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Tactical Deployment Success v4.2
        run: |
          echo "üéñÔ∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "     PATRIOTS PROTOCOL v4.2 - TACTICAL INTELLIGENCE DEPLOYED"
          echo "  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "  üåê Dashboard: ${{ steps.deployment.outputs.page_url }}"
          echo "  üìä Mission: ${{ needs.tactical-threat-intelligence.outputs.mission_status }}"
          echo "  üéØ Threats: ${{ needs.tactical-threat-intelligence.outputs.threats_analyzed }}"
          echo "  üö® Critical: ${{ needs.tactical-threat-intelligence.outputs.critical_threats }}"
          echo "  üí• Zero-Day: ${{ needs.tactical-threat-intelligence.outputs.zero_day_activity }}"
          echo "  üî• THREATCON: ${{ needs.tactical-threat-intelligence.outputs.threatcon_level }}"
          echo "  ü§ñ AI Quality: ${{ needs.tactical-threat-intelligence.outputs.ai_insights_quality }}%"
          echo "  üõ°Ô∏è Readiness: ${{ needs.tactical-threat-intelligence.outputs.tactical_readiness }}"
          echo "  üõ°Ô∏è Force Protection: ${{ needs.tactical-threat-intelligence.outputs.force_protection_status }}"
          echo "  üìà Evolution: ${{ needs.tactical-threat-intelligence.outputs.threat_evolution }}"
          echo "  üíé Features: Tactical SITREP ‚Ä¢ Enhanced Risk ‚Ä¢ MGS Interface ‚Ä¢ AI Recommendations"
          echo "  ‚è∞ Next Mission: 6 hours"
          echo "  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

  tactical-mission-summary:
    runs-on: ubuntu-latest
    needs: [tactical-threat-intelligence, deploy-tactical-dashboard]
    if: always()
    steps:
      - name: Patriots Protocol Tactical Mission Summary v4.2
        run: |
          echo "üéñÔ∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "     PATRIOTS PROTOCOL v4.2 - TACTICAL INTELLIGENCE COMPLETE"
          echo "  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "  üìÖ Mission: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "  üìä Status: ${{ needs.tactical-threat-intelligence.outputs.mission_status || 'UNKNOWN' }}"
          echo "  üéØ Threats Analyzed: ${{ needs.tactical-threat-intelligence.outputs.threats_analyzed || '0' }}"
          echo "  üö® Critical Threats: ${{ needs.tactical-threat-intelligence.outputs.critical_threats || '0' }}"
          echo "  üí• Zero-Day Activity: ${{ needs.tactical-threat-intelligence.outputs.zero_day_activity || '0' }}"
          echo "  üî• THREATCON Level: ${{ needs.tactical-threat-intelligence.outputs.threatcon_level || 'UNKNOWN' }}"
          echo "  üéØ Intelligence Confidence: ${{ needs.tactical-threat-intelligence.outputs.intelligence_confidence || '0' }}%"
          echo "  ü§ñ AI Insights Quality: ${{ needs.tactical-threat-intelligence.outputs.ai_insights_quality || '0' }}%"
          echo "  üõ°Ô∏è Tactical Readiness: ${{ needs.tactical-threat-intelligence.outputs.tactical_readiness || 'UNKNOWN' }}"
          echo "  üõ°Ô∏è Force Protection: ${{ needs.tactical-threat-intelligence.outputs.force_protection_status || 'UNKNOWN' }}"
          echo "  üìà Threat Evolution: ${{ needs.tactical-threat-intelligence.outputs.threat_evolution || 'unknown' }}"
          echo "  üõ°Ô∏è Tactical Intelligence: OPERATIONAL"
          echo "  üíé Mode: Enhanced Tactical SITREP"
          echo "  ‚è∞ Update Frequency: Every 6 hours"
          echo "  ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          
          # Enhanced tactical assessment
          CRITICAL_COUNT="${{ needs.tactical-threat-intelligence.outputs.critical_threats || '0' }}"
          ZERO_DAY_COUNT="${{ needs.tactical-threat-intelligence.outputs.zero_day_activity || '0' }}"
          AI_QUALITY="${{ needs.tactical-threat-intelligence.outputs.ai_insights_quality || '0' }}"
          TACTICAL_READINESS="${{ needs.tactical-threat-intelligence.outputs.tactical_readiness || 'UNKNOWN' }}"
          FORCE_PROTECTION="${{ needs.tactical-threat-intelligence.outputs.force_protection_status || 'UNKNOWN' }}"
          THREATCON="${{ needs.tactical-threat-intelligence.outputs.threatcon_level || 'UNKNOWN' }}"
          EVOLUTION="${{ needs.tactical-threat-intelligence.outputs.threat_evolution || 'unknown' }}"
          
          echo "üö® TACTICAL THREAT ASSESSMENT v4.2:"
          
          if [ "$CRITICAL_COUNT" -gt "4" ]; then
            echo "   üö® CONDITION RED: $CRITICAL_COUNT critical threats detected"
            echo "   üìã Command attention and emergency response required"
          elif [ "$CRITICAL_COUNT" -gt "2" ]; then
            echo "   ‚ö†Ô∏è CONDITION ORANGE: $CRITICAL_COUNT critical threats detected"
            echo "   üìã Enhanced security posture and monitoring required"
          elif [ "$CRITICAL_COUNT" -gt "0" ]; then
            echo "   ‚ö†Ô∏è CONDITION YELLOW: $CRITICAL_COUNT critical threats detected"
            echo "   üìã Increased vigilance and response readiness required"
          else
            echo "   ‚úÖ CONDITION GREEN: Threat level within normal parameters"
          fi
          
          if [ "$ZERO_DAY_COUNT" -gt "0" ]; then
            echo "   üí• ZERO-DAY ALERT: $ZERO_DAY_COUNT active exploits detected"
            echo "   üõ°Ô∏è Emergency patch management and containment required"
          fi
          
          echo ""
          echo "ü§ñ TACTICAL AI PERFORMANCE & INTELLIGENCE QUALITY v4.2:"
          if [ "$AI_QUALITY" -ge "90" ] && [ "$TACTICAL_READINESS" = "GREEN" ]; then
            echo "   ‚úÖ AI Performance: EXCELLENT (v4.2 Tactical Optimal)"
            echo "   üíé Tactical Intelligence: MAXIMUM QUALITY"
            echo "   üõ°Ô∏è Readiness Status: OPTIMAL"
          elif [ "$AI_QUALITY" -ge "80" ] && [ "$TACTICAL_READINESS" != "RED" ]; then
            echo "   ‚úÖ AI Performance: VERY GOOD (v4.2 Tactical Enhanced)"
            echo "   üíé Tactical Intelligence: HIGH QUALITY"
            echo "   üõ°Ô∏è Readiness Status: GOOD"
          elif [ "$AI_QUALITY" -ge "70" ]; then
            echo "   ‚úÖ AI Performance: GOOD (v4.2 Tactical Standard)"
            echo "   üíé Tactical Intelligence: MEDIUM QUALITY"
            echo "   üõ°Ô∏è Readiness Status: ACCEPTABLE"
          else
            echo "   ‚ö†Ô∏è Performance: TACTICAL OPTIMIZATION NEEDED"
            echo "   üìã Review AI tactical analysis and SITREP generation"
          fi
          
          echo ""
          echo "üõ°Ô∏è FORCE PROTECTION & TACTICAL READINESS:"
          echo "   üéØ Current Readiness Level: $TACTICAL_READINESS"
          echo "   üõ°Ô∏è Force Protection Status: $FORCE_PROTECTION"
          echo "   üî• THREATCON Level: $THREATCON"
          
          case "$TACTICAL_READINESS" in
            "GREEN")
              echo "   ‚úÖ All systems operational - standard monitoring active"
              ;;
            "YELLOW")
              echo "   ‚ö†Ô∏è Enhanced security posture - increased vigilance required"
              ;;
            "ORANGE")
              echo "   üö® High alert status - tactical response teams on standby"
              ;;
            "RED")
              echo "   üö® Maximum alert - immediate tactical response required"
              ;;
            *)
              echo "   ‚ùì Readiness status unknown - system assessment required"
              ;;
          esac
          
          echo ""
          echo "üíé TACTICAL FEATURES ACTIVE v4.2:"
          echo "   üìã Tactical SITREP: AI-generated situation reports with actionable intelligence"
          echo "   üéØ Enhanced Risk Assessment: Multi-factor tactical risk analysis"
          echo "   üõ°Ô∏è Force Protection Analysis: Automated readiness level assessment"
          echo "   üé® MGS-Style Interface: Tactical cyberpunk command center design"
          echo "   üì° AI-Curated Intel Feeds: Recommended high-value intelligence sources"
          echo "   ‚ö° Smart Tactical Optimization: Maximum intelligence value per operation"
          
          echo ""
          echo "üìà THREAT EVOLUTION & TACTICAL FORECAST:"
          case "$EVOLUTION" in
            "escalating")
              echo "   üî• ESCALATING: Threat landscape showing increased hostile activity"
              echo "   üìã Recommendation: Enhance defensive posture and response readiness"
              ;;
            "elevated")
              echo "   ‚ö†Ô∏è ELEVATED: Above-normal threat activity detected"
              echo "   üìã Recommendation: Increased monitoring and tactical preparedness"
              ;;
            "stable")
              echo "   ‚úÖ STABLE: Threat landscape maintaining normal operational patterns"
              echo "   üìã Recommendation: Continue standard tactical monitoring procedures"
              ;;
            "improving")
              echo "   üìâ IMPROVING: Threat landscape showing decreased hostile activity"
              echo "   üìã Recommendation: Maintain vigilance while adjusting resource allocation"
              ;;
            *)
              echo "   ‚ùì UNKNOWN: Threat evolution pattern requires tactical analysis"
              echo "   üìã Recommendation: Review intelligence collection and assessment methods"
              ;;
          esac
          
          echo ""
          echo "üéñÔ∏è Patriots Protocol v4.2 Tactical Intelligence Mission Complete"
          echo "   üîó Tactical Dashboard: Live intelligence with enhanced MGS interface"
          echo "   üõ°Ô∏è Repository: https://github.com/danishnizmi/Patriots_Protocol"
          echo "   üìà Next Mission: Scheduled in 6 hours for continuous tactical awareness"
          echo "   üíé Status: TACTICAL INTELLIGENCE MODE OPERATIONAL"
