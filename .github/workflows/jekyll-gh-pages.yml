# Patriots Protocol - Intelligence Dashboard Deployment
name: Deploy Patriots Protocol Intelligence Dashboard

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
    paths-ignore:
      - 'data/**'  # Ignore data updates from intelligence workflow
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Create intelligence data directory if missing
        run: |
          mkdir -p data
          # Create fallback intelligence data file if it doesn't exist
          if [ ! -f data/news-analysis.json ]; then
            cat > data/news-analysis.json << 'EOF'
          {
            "articles": [
              {
                "title": "Patriots Protocol Intelligence Network Initialization",
                "summary": "AI-driven cyber threat intelligence network successfully deployed. Monitoring global threat feeds and preparing tactical assessments for enhanced security posture.",
                "source": "PATRIOTS_PROTOCOL",
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
                "threat_level": "LOW",
                "ai_analysis": "Intelligence network operational. All AI threat analysis models active and ready for comprehensive cyber threat processing and assessment.",
                "confidence": 0.95,
                "severity_score": 2,
                "keywords": ["INTELLIGENCE", "NETWORK", "OPERATIONAL"],
                "attack_vectors": ["monitoring"],
                "affected_sectors": ["intelligence"],
                "geolocation": "Global",
                "threat_actors": ["none"],
                "technical_details": {
                  "malware_families": [],
                  "attack_techniques": [],
                  "vulnerabilities": [],
                  "indicators": []
                }
              }
            ],
            "metrics": {
              "total_threats": 0,
              "critical_threats": 0,
              "high_threats": 0,
              "medium_threats": 0,
              "low_threats": 0,
              "threat_actors_identified": 0,
              "attack_techniques_observed": 0,
              "sectors_targeted": 0,
              "global_threat_level": "LOW",
              "intelligence_confidence": 95,
              "fresh_intel_24h": 0,
              "source_credibility": 0.95,
              "emerging_trends": ["Intelligence Network Deployment", "AI Integration", "Threat Monitoring"],
              "threat_evolution": "stable"
            },
            "lastUpdated": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
            "version": "4.0",
            "intelligence_summary": {
              "mission_status": "OPERATIONAL",
              "threats_analyzed": 0,
              "intelligence_sources": 8,
              "confidence_level": 95,
              "threat_landscape": "LOW",
              "repository": "https://github.com/danishnizmi/Patriots_Protocol"
            }
          }
          EOF
          fi

      - name: Validate Intelligence Dashboard structure
        run: |
          echo "🔍 Validating Patriots Protocol Intelligence Dashboard..."
          
          # Check if index.html exists and contains required elements
          if [ -f "index.html" ]; then
            echo "✅ index.html found"
            
            if grep -q "PATRIOTS PROTOCOL" index.html; then
              echo "✅ Dashboard title found"
            else
              echo "❌ Dashboard title missing"
              exit 1
            fi
            
            if grep -q "React" index.html; then
              echo "✅ React framework detected"
            else
              echo "⚠️  React framework not detected"
            fi
            
            if grep -q "CYBER INTELLIGENCE" index.html; then
              echo "✅ Intelligence subtitle found"
            else
              echo "❌ Intelligence subtitle missing"
              exit 1
            fi
            
            # Check for intelligence-specific content
            if grep -q "CYBER THREAT INTELLIGENCE" index.html; then
              echo "✅ Cyber threat intelligence content found"
            else
              echo "❌ Cyber threat intelligence content missing"
              exit 1
            fi
            
          else
            echo "❌ index.html not found"
            exit 1
          fi
          
          # Validate intelligence data structure
          if [ -f "data/news-analysis.json" ]; then
            echo "✅ Intelligence data file found"
            
            python3 -c "
          import json
          import sys
          
          try:
              with open('data/news-analysis.json', 'r') as f:
                  data = json.load(f)
              
              # Check required intelligence fields
              required_fields = ['articles', 'metrics']
              missing = [f for f in required_fields if f not in data]
              
              if missing:
                  print(f'❌ Missing intelligence fields: {missing}')
                  sys.exit(1)
              
              metrics = data.get('metrics', {})
              articles = data.get('articles', [])
              
              print(f'✅ Intelligence data structure valid')
              print(f'📊 Articles: {len(articles)}')
              print(f'🎯 Threat Level: {metrics.get(\"global_threat_level\", \"LOW\")}')
              print(f'🤖 Confidence: {metrics.get(\"intelligence_confidence\", 85)}%')
              
          except Exception as e:
              print(f'❌ Intelligence data validation failed: {e}')
              sys.exit(1)
          "
          else
            echo "❌ Intelligence data file missing"
            exit 1
          fi
          
          echo "🎯 Patriots Protocol Intelligence Dashboard validation complete"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Intelligence Dashboard Deployment Success
        run: |
          echo "🎖️  Patriots Protocol Intelligence Dashboard deployed successfully!"
          echo "🌐 Intelligence Dashboard URL: ${{ steps.deployment.outputs.page_url }}"
          echo "🎯 Status: OPERATIONAL"
          echo "🛡️  Cyber Intelligence Network: ACTIVE"
